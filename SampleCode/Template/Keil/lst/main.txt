; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=2

                  GPIO_Init PROC
;;;1646   
;;;1647   void GPIO_Init (void)
000000  b510              PUSH     {r4,lr}
;;;1648   {
;;;1649       GPIO_SetMode(PB, BIT14, GPIO_MODE_OUTPUT);
000002  2201              MOVS     r2,#1
000004  0391              LSLS     r1,r2,#14
000006  4802              LDR      r0,|L1.16|
000008  f7fffffe          BL       GPIO_SetMode
;;;1650   }
00000c  bd10              POP      {r4,pc}
;;;1651   
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x40004040

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;1675   
;;;1676   void SYS_Init(void)
000000  b570              PUSH     {r4-r6,lr}
000002  2059              MOVS     r0,#0x59
000004  4c26              LDR      r4,|L2.160|
000006  2216              MOVS     r2,#0x16
000008  2188              MOVS     r1,#0x88
                  |L2.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6022              STR      r2,[r4,#0]
00000e  6021              STR      r1,[r4,#0]
000010  6823              LDR      r3,[r4,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L2.10|
;;;1677   {
;;;1678       /* Unlock protected registers */
;;;1679       SYS_UnlockReg();
;;;1680   
;;;1681       /* Enable HIRC clock (Internal RC 48MHz) */
;;;1682       CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000016  2004              MOVS     r0,#4
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;1683   
;;;1684       /* Wait for HIRC clock ready */
;;;1685       CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;1686   
;;;1687       /* Select HCLK clock source as HIRC and HCLK source divider as 1 */
;;;1688       CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
000022  2100              MOVS     r1,#0
000024  2007              MOVS     r0,#7
000026  f7fffffe          BL       CLK_SetHCLK
;;;1689   
;;;1690       CLK_EnableModuleClock(UART0_MODULE);
00002a  4d1e              LDR      r5,|L2.164|
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       CLK_EnableModuleClock
;;;1691       CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART0SEL_HIRC, CLK_CLKDIV0_UART0(1));
000032  2103              MOVS     r1,#3
000034  2200              MOVS     r2,#0
000036  0609              LSLS     r1,r1,#24
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       CLK_SetModuleClock
;;;1692       /* Set PB multi-function pins for UART0 RXD=PB.12 and TXD=PB.13 */
;;;1693       SYS->GPB_MFPH = (SYS->GPB_MFPH & ~(SYS_GPB_MFPH_PB12MFP_Msk | SYS_GPB_MFPH_PB13MFP_Msk)) |
00003e  06ad              LSLS     r5,r5,#26
000040  6be8              LDR      r0,[r5,#0x3c]
000042  21ff              MOVS     r1,#0xff
000044  0409              LSLS     r1,r1,#16
000046  4388              BICS     r0,r0,r1
000048  2133              MOVS     r1,#0x33
00004a  0449              LSLS     r1,r1,#17
00004c  1840              ADDS     r0,r0,r1
00004e  63e8              STR      r0,[r5,#0x3c]
;;;1694                       (SYS_GPB_MFPH_PB12MFP_UART0_RXD | SYS_GPB_MFPH_PB13MFP_UART0_TXD);
;;;1695   
;;;1696       CLK_EnableModuleClock(TMR0_MODULE);
000050  4e15              LDR      r6,|L2.168|
000052  4630              MOV      r0,r6
000054  f7fffffe          BL       CLK_EnableModuleClock
;;;1697     	CLK_SetModuleClock(TMR0_MODULE, CLK_CLKSEL1_TMR0SEL_HIRC, 0);
000058  2107              MOVS     r1,#7
00005a  2200              MOVS     r2,#0
00005c  0209              LSLS     r1,r1,#8
00005e  4630              MOV      r0,r6
000060  f7fffffe          BL       CLK_SetModuleClock
;;;1698   
;;;1699       CLK_EnableModuleClock(TMR1_MODULE);
000064  4e11              LDR      r6,|L2.172|
000066  4630              MOV      r0,r6
000068  f7fffffe          BL       CLK_EnableModuleClock
;;;1700       CLK_SetModuleClock(TMR1_MODULE, CLK_CLKSEL1_TMR1SEL_PCLK0, 0);
00006c  2200              MOVS     r2,#0
00006e  1469              ASRS     r1,r5,#17
000070  4630              MOV      r0,r6
000072  f7fffffe          BL       CLK_SetModuleClock
;;;1701   
;;;1702       CLK_SetModuleClock(SPI0_MODULE, CLK_CLKSEL2_SPI0SEL_PCLK1, MODULE_NoMsk);
000076  4e0e              LDR      r6,|L2.176|
000078  2200              MOVS     r2,#0
00007a  2120              MOVS     r1,#0x20
00007c  4630              MOV      r0,r6
00007e  f7fffffe          BL       CLK_SetModuleClock
;;;1703       CLK_EnableModuleClock(SPI0_MODULE);
000082  4630              MOV      r0,r6
000084  f7fffffe          BL       CLK_EnableModuleClock
;;;1704   
;;;1705       /* PA.3 is SPI0_SS,   PA.2 is SPI0_CLK,
;;;1706          PA.1 is SPI0_MISO, PA.0 is SPI0_MOSI*/
;;;1707       SYS->GPA_MFPL = (SYS->GPA_MFPL & ~(SYS_GPA_MFPL_PA3MFP_Msk |
000088  6b28              LDR      r0,[r5,#0x30]
00008a  490a              LDR      r1,|L2.180|
00008c  0c00              LSRS     r0,r0,#16
00008e  0400              LSLS     r0,r0,#16
000090  1840              ADDS     r0,r0,r1
000092  6328              STR      r0,[r5,#0x30]
;;;1708                                          SYS_GPA_MFPL_PA2MFP_Msk |
;;;1709                                          SYS_GPA_MFPL_PA1MFP_Msk |
;;;1710                                          SYS_GPA_MFPL_PA0MFP_Msk)) |
;;;1711                       (SYS_GPA_MFPL_PA3MFP_SPI0_SS |
;;;1712                        SYS_GPA_MFPL_PA2MFP_SPI0_CLK |
;;;1713                        SYS_GPA_MFPL_PA1MFP_SPI0_MISO |
;;;1714                        SYS_GPA_MFPL_PA0MFP_SPI0_MOSI);
;;;1715   
;;;1716   
;;;1717       /* Update System Core Clock */
;;;1718       SystemCoreClockUpdate();
000094  f7fffffe          BL       SystemCoreClockUpdate
000098  2000              MOVS     r0,#0
00009a  6020              STR      r0,[r4,#0]
;;;1719   
;;;1720       /* Lock protected registers */
;;;1721       SYS_LockReg();
;;;1722   }
00009c  bd70              POP      {r4-r6,pc}
;;;1723   
                          ENDP

00009e  0000              DCW      0x0000
                  |L2.160|
                          DCD      0x40000100
                  |L2.164|
                          DCD      0x5f803d10
                  |L2.168|
                          DCD      0x5e800002
                  |L2.172|
                          DCD      0x5ec00003
                  |L2.176|
                          DCD      0x6640000d
                  |L2.180|
                          DCD      0x00004444

                          AREA ||i.StateMachine||, CODE, READONLY, ALIGN=2

                  StateMachine PROC
;;;1513   
;;;1514   void StateMachine()
000000  b57f              PUSH     {r0-r6,lr}
;;;1515   {
;;;1516   //	if (DemoState++ >= state_Max)
;;;1517   //	{
;;;1518   //		DemoState = state_Default+1;
;;;1519   //	}
;;;1520   //	DemoState = 0;	//quick test
;;;1521   
;;;1522   	switch(DemoState)
000002  4840              LDR      r0,|L3.260|
;;;1523   	{
;;;1524   		case state_Rainbow:
;;;1525   			getRainbow(50);
;;;1526   			delay_ms(48);	
;;;1527   			break;
;;;1528   
;;;1529   		case state_RainbowCycle:
;;;1530   			getRainbowCycle(2 ,10);	//(5 , 1000);
;;;1531   //			delay_ms(120);
;;;1532   			break;
;;;1533   
;;;1534   		case state_TheaterChase:
;;;1535   			getTheaterChase(30,colorsFull[Coloridx][0], colorsFull[Coloridx][1], colorsFull[Coloridx][2]);
000004  4d40              LDR      r5,|L3.264|
000006  7801              LDRB     r1,[r0,#0]            ;1522  ; DemoState
000008  8940              LDRH     r0,[r0,#0xa]
00000a  0042              LSLS     r2,r0,#1
00000c  1884              ADDS     r4,r0,r2
00000e  1960              ADDS     r0,r4,r5
000010  2907              CMP      r1,#7                 ;1522
000012  d04c              BEQ      |L3.174|
000014  dc07              BGT      |L3.38|
000016  000b              MOVS     r3,r1                 ;1522
000018  f7fffffe          BL       __ARM_common_switch8
00001c  07112328          DCB      0x07,0x11,0x23,0x28
000020  2d34393d          DCB      0x2d,0x34,0x39,0x3d
000024  1100              DCB      0x11,0x00
                  |L3.38|
000026  2932              CMP      r1,#0x32              ;1522
000028  d05d              BEQ      |L3.230|
00002a  dc09              BGT      |L3.64|
00002c  2908              CMP      r1,#8                 ;1522
00002e  d045              BEQ      |L3.188|
000030  2909              CMP      r1,#9                 ;1522
000032  d04c              BEQ      |L3.206|
000034  2931              CMP      r1,#0x31              ;1522
000036  d102              BNE      |L3.62|
;;;1536   //			getTheaterChase(60,0x00,0xFF,0x00);
;;;1537   //			getTheaterChase(60,0x00,0x00,0xFF);
;;;1538   //			delay_ms(120);
;;;1539   
;;;1540   			setLED_ColorIdxChange();
;;;1541   			break;
;;;1542   
;;;1543   		case state_TheaterChaseRainbow:
;;;1544   			getTheaterChaseRainbow(1);
;;;1545   			delay_ms(240);
;;;1546   			break;
;;;1547   
;;;1548   		case state_RGBSequence:
;;;1549   			getRGBSequence(60);
;;;1550   
;;;1551   			break;
;;;1552   		
;;;1553   		case state_AlternateColors:
;;;1554   			getAlternateColors(128*500, 128, colorsFull[Coloridx][0], colorsFull[Coloridx][1], colorsFull[Coloridx][2], colorsFull[Coloridx][0], colorsFull[Coloridx][1], colorsFull[Coloridx][2]);
;;;1555   
;;;1556   			setLED_ColorIdxChange();
;;;1557   			break;
;;;1558   
;;;1559   		case state_FullEmpty:
;;;1560   			getFullEmpty(30, colorsFull[Coloridx][0], colorsFull[Coloridx][1], colorsFull[Coloridx][2]);
;;;1561   
;;;1562   			setLED_ColorIdxChange();
;;;1563   			break;
;;;1564   		
;;;1565   		case state_PatternMove:
;;;1566   			getPatternMove(50, 10, colorsFull[Coloridx][0], colorsFull[Coloridx][1], colorsFull[Coloridx][2]);
;;;1567   
;;;1568   			setLED_ColorIdxChange();
;;;1569   			break;
;;;1570   
;;;1571   		#if defined (ENABLE_EXTRA_DEMO)
;;;1572   		case state_ColorWheel:
;;;1573   			getColorWheel(60);
;;;1574   			
;;;1575   			setLED_ColorWipe(0, 0, 0);
;;;1576   			delay_ms(120);
;;;1577   			break;
;;;1578   
;;;1579   		case state_AllColors:
;;;1580   			getAllColors(10);	
000038  200a              MOVS     r0,#0xa
00003a  f7fffffe          BL       getAllColors
                  |L3.62|
;;;1581   			break;
;;;1582   		#endif	/*ENABLE_EXTRA_DEMO*/
;;;1583   
;;;1584   		case state_HeartBeat:
;;;1585   			getHeartBeat(900, colorsFull[Coloridx][0], colorsFull[Coloridx][1], colorsFull[Coloridx][2]);
;;;1586   
;;;1587   			setLED_ColorIdxChange();
;;;1588   			break;	
;;;1589   
;;;1590   		case state_CircularRing:
;;;1591   			getCircularRing(30, colorsFull[Coloridx][0], colorsFull[Coloridx][1], colorsFull[Coloridx][2]);
;;;1592   	
;;;1593   			setLED_ColorIdxChange();
;;;1594   			break;	
;;;1595   		
;;;1596   		case state_FromAToB:
;;;1597   			getFromAToB(512, 16, colorsFull[Coloridx][0], colorsFull[Coloridx][1], colorsFull[Coloridx][2], colorsFull[Coloridx][0], colorsFull[Coloridx][1], colorsFull[Coloridx][2]);
;;;1598   		
;;;1599   			setLED_ColorIdxChange();
;;;1600   			break;	
;;;1601   			
;;;1602   	}
;;;1603   
;;;1604   //	delay_ms(DEMO_MS);
;;;1605   }
00003e  bd7f              POP      {r0-r6,pc}
                  |L3.64|
000040  2933              CMP      r1,#0x33              ;1522
000042  d058              BEQ      |L3.246|
000044  2934              CMP      r1,#0x34              ;1522
000046  d1fa              BNE      |L3.62|
000048  7881              LDRB     r1,[r0,#2]            ;1597
00004a  7843              LDRB     r3,[r0,#1]            ;1597
00004c  5d2a              LDRB     r2,[r5,r4]            ;1597
00004e  466e              MOV      r6,sp                 ;1597
000050  c60e              STM      r6!,{r1-r3}           ;1597
000052  9103              STR      r1,[sp,#0xc]          ;1597
000054  2110              MOVS     r1,#0x10              ;1597
000056  0148              LSLS     r0,r1,#5              ;1597
000058  f7fffffe          BL       getFromAToB
                  |L3.92|
00005c  f7fffffe          BL       setLED_ColorIdxChange
000060  bd7f              POP      {r0-r6,pc}
000062  2032              MOVS     r0,#0x32              ;1525
000064  f7fffffe          BL       getRainbow
000068  2030              MOVS     r0,#0x30              ;1526
00006a  e039              B        |L3.224|
00006c  210a              MOVS     r1,#0xa               ;1530
00006e  2002              MOVS     r0,#2                 ;1530
000070  f7fffffe          BL       getRainbowCycle
000074  bd7f              POP      {r0-r6,pc}
000076  7883              LDRB     r3,[r0,#2]            ;1535
000078  7842              LDRB     r2,[r0,#1]            ;1535
00007a  5d29              LDRB     r1,[r5,r4]            ;1535
00007c  201e              MOVS     r0,#0x1e              ;1535
00007e  f7fffffe          BL       getTheaterChase
000082  e7eb              B        |L3.92|
000084  2001              MOVS     r0,#1                 ;1544
000086  f7fffffe          BL       getTheaterChaseRainbow
00008a  20f0              MOVS     r0,#0xf0              ;1545
00008c  e028              B        |L3.224|
00008e  203c              MOVS     r0,#0x3c              ;1549
000090  f7fffffe          BL       getRGBSequence
000094  bd7f              POP      {r0-r6,pc}
000096  7881              LDRB     r1,[r0,#2]            ;1554
000098  7843              LDRB     r3,[r0,#1]            ;1554
00009a  5d2a              LDRB     r2,[r5,r4]            ;1554
00009c  466e              MOV      r6,sp                 ;1554
00009e  c60e              STM      r6!,{r1-r3}           ;1554
0000a0  9103              STR      r1,[sp,#0xc]          ;1554
0000a2  207d              MOVS     r0,#0x7d              ;1554
0000a4  2180              MOVS     r1,#0x80              ;1554
0000a6  0240              LSLS     r0,r0,#9              ;1554
0000a8  f7fffffe          BL       getAlternateColors
0000ac  e7d6              B        |L3.92|
                  |L3.174|
0000ae  7883              LDRB     r3,[r0,#2]            ;1560
0000b0  7842              LDRB     r2,[r0,#1]            ;1560
0000b2  5d29              LDRB     r1,[r5,r4]            ;1560
0000b4  201e              MOVS     r0,#0x1e              ;1560
0000b6  f7fffffe          BL       getFullEmpty
0000ba  e7cf              B        |L3.92|
                  |L3.188|
0000bc  7881              LDRB     r1,[r0,#2]            ;1566
0000be  9100              STR      r1,[sp,#0]            ;1566
0000c0  7843              LDRB     r3,[r0,#1]            ;1566
0000c2  5d2a              LDRB     r2,[r5,r4]            ;1566
0000c4  210a              MOVS     r1,#0xa               ;1566
0000c6  2032              MOVS     r0,#0x32              ;1566
0000c8  f7fffffe          BL       getPatternMove
0000cc  e7c6              B        |L3.92|
                  |L3.206|
0000ce  203c              MOVS     r0,#0x3c              ;1573
0000d0  f7fffffe          BL       getColorWheel
0000d4  2200              MOVS     r2,#0                 ;1575
0000d6  4611              MOV      r1,r2                 ;1575
0000d8  4610              MOV      r0,r2                 ;1575
0000da  f7fffffe          BL       setLED_ColorWipe
0000de  2078              MOVS     r0,#0x78              ;1576
                  |L3.224|
0000e0  f7fffffe          BL       delay_ms
0000e4  bd7f              POP      {r0-r6,pc}
                  |L3.230|
0000e6  7883              LDRB     r3,[r0,#2]            ;1585
0000e8  7842              LDRB     r2,[r0,#1]            ;1585
0000ea  20e1              MOVS     r0,#0xe1              ;1585
0000ec  5d29              LDRB     r1,[r5,r4]            ;1585
0000ee  0080              LSLS     r0,r0,#2              ;1585
0000f0  f7fffffe          BL       getHeartBeat
0000f4  e7b2              B        |L3.92|
                  |L3.246|
0000f6  7883              LDRB     r3,[r0,#2]            ;1591
0000f8  7842              LDRB     r2,[r0,#1]            ;1591
0000fa  5d29              LDRB     r1,[r5,r4]            ;1591
0000fc  201e              MOVS     r0,#0x1e              ;1591
0000fe  f7fffffe          BL       getCircularRing
000102  e7ab              B        |L3.92|
;;;1606   
                          ENDP

                  |L3.260|
                          DCD      ||.data||
                  |L3.264|
                          DCD      ||.constdata||

                          AREA ||i.TIMER1_Init||, CODE, READONLY, ALIGN=2

                  TIMER1_Init PROC
;;;1667   
;;;1668   void TIMER1_Init(void)
000000  b510              PUSH     {r4,lr}
;;;1669   {
;;;1670       TIMER_Open(TIMER1, TIMER_PERIODIC_MODE, 1000);
000002  4c0a              LDR      r4,|L4.44|
000004  227d              MOVS     r2,#0x7d
000006  2101              MOVS     r1,#1
000008  00d2              LSLS     r2,r2,#3
00000a  06c9              LSLS     r1,r1,#27
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       TIMER_Open
000012  6820              LDR      r0,[r4,#0]
000014  0621              LSLS     r1,r4,#24
000016  4308              ORRS     r0,r0,r1
000018  6020              STR      r0,[r4,#0]
00001a  1508              ASRS     r0,r1,#20
00001c  4904              LDR      r1,|L4.48|
00001e  6008              STR      r0,[r1,#0]
000020  6820              LDR      r0,[r4,#0]
000022  0589              LSLS     r1,r1,#22
000024  4308              ORRS     r0,r0,r1
000026  6020              STR      r0,[r4,#0]
;;;1671       TIMER_EnableInt(TIMER1);
;;;1672       NVIC_EnableIRQ(TMR1_IRQn);	
;;;1673       TIMER_Start(TIMER1);
;;;1674   }
000028  bd10              POP      {r4,pc}
;;;1675   
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
                          DCD      0x40050020
                  |L4.48|
                          DCD      0xe000e100

                          AREA ||i.TMR1_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR1_IRQHandler PROC
;;;1652   
;;;1653   void TMR1_IRQHandler(void)
000000  4908              LDR      r1,|L5.36|
000002  6888              LDR      r0,[r1,#8]
000004  07c0              LSLS     r0,r0,#31
000006  0fc0              LSRS     r0,r0,#31
;;;1654   {
000008  d00b              BEQ      |L5.34|
00000a  2001              MOVS     r0,#1
00000c  6088              STR      r0,[r1,#8]
;;;1655   	static uint16_t CNT = 0;
;;;1656   	
;;;1657       if(TIMER_GetIntFlag(TIMER1) == 1)
;;;1658       {
;;;1659           TIMER_ClearIntFlag(TIMER1);
;;;1660   	
;;;1661   		if (CNT++ >= 1000)
00000e  4906              LDR      r1,|L5.40|
000010  8988              LDRH     r0,[r1,#0xc]  ; CNT
000012  1c42              ADDS     r2,r0,#1
000014  818a              STRH     r2,[r1,#0xc]
000016  227d              MOVS     r2,#0x7d
000018  00d2              LSLS     r2,r2,#3
00001a  4290              CMP      r0,r2
00001c  d301              BCC      |L5.34|
;;;1662   		{		
;;;1663   			CNT = 0;
00001e  2000              MOVS     r0,#0
000020  8188              STRH     r0,[r1,#0xc]
                  |L5.34|
;;;1664   		}
;;;1665       }
;;;1666   }
000022  4770              BX       lr
;;;1667   
                          ENDP

                  |L5.36|
                          DCD      0x40050020
                  |L5.40|
                          DCD      ||.data||

                          AREA ||i.UART02_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART02_IRQHandler PROC
;;;1627   
;;;1628   void UART02_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1629   {
;;;1630   
;;;1631       if(UART_GET_INT_FLAG(UART0, UART_INTSTS_RDAINT_Msk | UART_INTSTS_RXTOINT_Msk))     /* UART receive data available flag */
000002  4c0b              LDR      r4,|L6.48|
000004  69e0              LDR      r0,[r4,#0x1c]
000006  2111              MOVS     r1,#0x11
000008  0209              LSLS     r1,r1,#8
00000a  4208              TST      r0,r1
00000c  d102              BNE      |L6.20|
00000e  e004              B        |L6.26|
                  |L6.16|
;;;1632       {
;;;1633           while(UART_GET_RX_EMPTY(UART0) == 0)
;;;1634           {
;;;1635               UARTx_Process();
000010  f7fffffe          BL       UARTx_Process
                  |L6.20|
000014  69a1              LDR      r1,[r4,#0x18]         ;1633
000016  0449              LSLS     r1,r1,#17             ;1633
000018  d5fa              BPL      |L6.16|
                  |L6.26|
;;;1636           }
;;;1637       }
;;;1638   
;;;1639       if(UART0->FIFOSTS & (UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_PEF_Msk | UART_FIFOSTS_RXOVIF_Msk))
00001a  69a1              LDR      r1,[r4,#0x18]
00001c  4620              MOV      r0,r4
00001e  2271              MOVS     r2,#0x71
000020  4211              TST      r1,r2
000022  d003              BEQ      |L6.44|
;;;1640       {
;;;1641           UART_ClearIntFlag(UART0, (UART_INTSTS_RLSINT_Msk| UART_INTSTS_BUFERRINT_Msk));
000024  2109              MOVS     r1,#9
000026  0289              LSLS     r1,r1,#10
000028  f7fffffe          BL       UART_ClearIntFlag
                  |L6.44|
;;;1642       }
;;;1643   
;;;1644   	
;;;1645   }
00002c  bd10              POP      {r4,pc}
;;;1646   
                          ENDP

00002e  0000              DCW      0x0000
                  |L6.48|
                          DCD      0x40070000

                          AREA ||i.UARTx_Process||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UARTx_Process PROC
;;;1606   
;;;1607   void UARTx_Process(void)
000000  b510              PUSH     {r4,lr}
;;;1608   {
;;;1609   	uint8_t res = 0;
;;;1610   	res = UART_READ(UART0);
000002  480f              LDR      r0,|L7.64|
000004  6800              LDR      r0,[r0,#0]
000006  b2c0              UXTB     r0,r0
;;;1611   
;;;1612   	if (res == 'x' || res == 'X')
000008  2878              CMP      r0,#0x78
00000a  d007              BEQ      |L7.28|
00000c  2858              CMP      r0,#0x58
00000e  d005              BEQ      |L7.28|
;;;1613   	{
;;;1614   		NVIC_SystemReset();
;;;1615   	}
;;;1616   
;;;1617   	if (res > 0x7F)
000010  287f              CMP      r0,#0x7f
000012  d90c              BLS      |L7.46|
;;;1618   	{
;;;1619   		printf("invalid command\r\n");
000014  a00b              ADR      r0,|L7.68|
000016  f7fffffe          BL       __2printf
;;;1620   	}
;;;1621   	else
;;;1622   	{
;;;1623   		DemoState = res - 0x30;
;;;1624   		printf("DemoState = %2d\r\n" , DemoState);
;;;1625   	}
;;;1626   }
00001a  bd10              POP      {r4,pc}
                  |L7.28|
00001c  f3bf8f4f          DSB      
000020  490e              LDR      r1,|L7.92|
000022  480d              LDR      r0,|L7.88|
000024  60c8              STR      r0,[r1,#0xc]
000026  f3bf8f4f          DSB      
                  |L7.42|
00002a  bf00              NOP      
00002c  e7fd              B        |L7.42|
                  |L7.46|
00002e  3830              SUBS     r0,r0,#0x30
000030  b2c1              UXTB     r1,r0                 ;1623
000032  480b              LDR      r0,|L7.96|
000034  7001              STRB     r1,[r0,#0]            ;1623
000036  a00b              ADR      r0,|L7.100|
000038  f7fffffe          BL       __2printf
00003c  bd10              POP      {r4,pc}
;;;1627   
                          ENDP

00003e  0000              DCW      0x0000
                  |L7.64|
                          DCD      0x40070000
                  |L7.68|
000044  696e7661          DCB      "invalid command\r\n",0
000048  6c696420
00004c  636f6d6d
000050  616e640d
000054  0a00    
000056  00                DCB      0
000057  00                DCB      0
                  |L7.88|
                          DCD      0x05fa0004
                  |L7.92|
                          DCD      0xe000ed00
                  |L7.96|
                          DCD      ||.data||
                  |L7.100|
000064  44656d6f          DCB      "DemoState = %2d\r\n",0
000068  53746174
00006c  65203d20
000070  2532640d
000074  0a00    
000076  00                DCB      0
000077  00                DCB      0

                          AREA ||i.WS2812C_DATA0||, CODE, READONLY, ALIGN=2

                  WS2812C_DATA0 PROC
;;;898    
;;;899    void WS2812C_DATA0(void)
000000  4803              LDR      r0,|L8.16|
                  |L8.2|
;;;900    {
;;;901    	while(!SPI_GET_TX_FIFO_EMPTY_FLAG(SPI0));	
000002  6941              LDR      r1,[r0,#0x14]
000004  03c9              LSLS     r1,r1,#15
000006  d5fc              BPL      |L8.2|
;;;902    	SPI_WRITE_TX(SPI0, WS_SPI_LOW);	
000008  21c0              MOVS     r1,#0xc0
00000a  6201              STR      r1,[r0,#0x20]
;;;903    }
00000c  4770              BX       lr
;;;904    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0x40061000

                          AREA ||i.WS2812C_DATA1||, CODE, READONLY, ALIGN=2

                  WS2812C_DATA1 PROC
;;;892    
;;;893    void WS2812C_DATA1(void)
000000  4803              LDR      r0,|L9.16|
                  |L9.2|
;;;894    {
;;;895    	while(!SPI_GET_TX_FIFO_EMPTY_FLAG(SPI0));	
000002  6941              LDR      r1,[r0,#0x14]
000004  03c9              LSLS     r1,r1,#15
000006  d5fc              BPL      |L9.2|
;;;896    	SPI_WRITE_TX(SPI0, WS_SPI_HIGH);	
000008  21fc              MOVS     r1,#0xfc
00000a  6201              STR      r1,[r0,#0x20]
;;;897    }
00000c  4770              BX       lr
;;;898    
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x40061000

                          AREA ||i.WS2812C_Initial||, CODE, READONLY, ALIGN=2

                  WS2812C_Initial PROC
;;;937    
;;;938    void WS2812C_Initial(void)
000000  b538              PUSH     {r3-r5,lr}
;;;939    {      
;;;940    	//PA.0 : SPI0_MOSI , PWM0_CH5 , D11
;;;941    
;;;942    	SPI_Open(SPI0, SPI_MASTER, SPI_MODE_0, 8, WS_SPI_FREQ);
000002  4807              LDR      r0,|L10.32|
000004  4c07              LDR      r4,|L10.36|
000006  9000              STR      r0,[sp,#0]
000008  2308              MOVS     r3,#8
00000a  2204              MOVS     r2,#4
00000c  2100              MOVS     r1,#0
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       SPI_Open
;;;943    	SPI_EnableAutoSS(SPI0, SPI_SS, SPI_SS_ACTIVE_LOW);
000014  2200              MOVS     r2,#0
000016  2101              MOVS     r1,#1
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       SPI_EnableAutoSS
;;;944    
;;;945    }
00001e  bd38              POP      {r3-r5,pc}
;;;946    
                          ENDP

                  |L10.32|
                          DCD      0x006acfc0
                  |L10.36|
                          DCD      0x40061000

                          AREA ||i.WS2812C_Send_1Byte||, CODE, READONLY, ALIGN=1

                  WS2812C_Send_1Byte PROC
;;;904    
;;;905    void WS2812C_Send_1Byte(uint8_t Data)
000000  b500              PUSH     {lr}
;;;906    {
000002  4603              MOV      r3,r0
;;;907    	uint8_t i = 0;
000004  2200              MOVS     r2,#0
                  |L11.6|
;;;908    
;;;909    	for (i = 0; i < 8; i ++)
;;;910    	{
;;;911    		if (Data & 0x80)
000006  0618              LSLS     r0,r3,#24
000008  d502              BPL      |L11.16|
;;;912    		{
;;;913    			WS2812C_DATA1();
00000a  f7fffffe          BL       WS2812C_DATA1
00000e  e001              B        |L11.20|
                  |L11.16|
;;;914    		}
;;;915    		else
;;;916    		{
;;;917    			WS2812C_DATA0();
000010  f7fffffe          BL       WS2812C_DATA0
                  |L11.20|
;;;918    		}
;;;919    		Data <<= 1;	
000014  0658              LSLS     r0,r3,#25
000016  1c52              ADDS     r2,r2,#1
000018  0e03              LSRS     r3,r0,#24
00001a  b2d2              UXTB     r2,r2                 ;909
00001c  2a08              CMP      r2,#8                 ;909
00001e  d3f2              BCC      |L11.6|
;;;920    	} 	
;;;921    	
;;;922    }
000020  bd00              POP      {pc}
;;;923    
                          ENDP


                          AREA ||i.WS2812C_Send_1bit||, CODE, READONLY, ALIGN=1

                  WS2812C_Send_1bit PROC
;;;924    
;;;925    void WS2812C_Send_1bit(uint8_t Data)
000000  b500              PUSH     {lr}
;;;926    {
;;;927    	switch(Data)
000002  2800              CMP      r0,#0
000004  d002              BEQ      |L12.12|
;;;928    	{
;;;929    		case 0: 
;;;930    			WS2812C_DATA0();				
;;;931    			break;
;;;932    		default:
;;;933    			WS2812C_DATA1();
000006  f7fffffe          BL       WS2812C_DATA1
;;;934    			break;
;;;935    	}	
;;;936    }
00000a  bd00              POP      {pc}
                  |L12.12|
00000c  f7fffffe          BL       WS2812C_DATA0
000010  bd00              POP      {pc}
;;;937    
                          ENDP


                          AREA ||i._stripEffect_Rainbow||, CODE, READONLY, ALIGN=2

                  _stripEffect_Rainbow PROC
;;;1036   //https://github.com/fduignan/NucleoF042_SingleWS2812B/blob/master/main.c
;;;1037   void _stripEffect_Rainbow(uint8_t* RED, uint8_t* GREEN, uint8_t* BLUE)	
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;1038   {   
;;;1039   	// Cycle through the colours of the rainbow (non-uniform brightness however)
;;;1040   	// Inspired by : http://academe.co.uk/2012/04/arduino-cycling-through-colours-of-the-rainbow/
;;;1041   	
;;;1042   	static uint8_t Red = 255;
;;;1043   	static uint8_t Green = 0;
;;;1044   	static uint8_t Blue = 0;
;;;1045   	static uint8_t State = 0;
;;;1046   	switch (State)
000002  4a1f              LDR      r2,|L13.128|
000004  4613              MOV      r3,r2
000006  7957              LDRB     r7,[r2,#5]  ; State
;;;1047   	{
;;;1048   		case 0:{
;;;1049   			Green++;
000008  78de              LDRB     r6,[r3,#3]
;;;1050   			if (Green == 255)
;;;1051   				State = 1;
;;;1052   			break;
;;;1053   		}
;;;1054   		case 1:{
;;;1055   			Red--;
00000a  789d              LDRB     r5,[r3,#2]
;;;1056   			if (Red == 0)
;;;1057   				State = 2;
;;;1058   			break;
;;;1059   		}
;;;1060   		case 2:{
;;;1061   			Blue++;
00000c  791c              LDRB     r4,[r3,#4]
00000e  003b              MOVS     r3,r7                 ;1046
000010  f7fffffe          BL       __ARM_common_switch8
000014  06040b12          DCB      0x06,0x04,0x0b,0x12
000018  1920272d          DCB      0x19,0x20,0x27,0x2d
00001c  1c76              ADDS     r6,r6,#1              ;1046
00001e  b2f3              UXTB     r3,r6                 ;1049
000020  70d3              STRB     r3,[r2,#3]            ;1049
000022  2bff              CMP      r3,#0xff              ;1050
000024  d123              BNE      |L13.110|
000026  2301              MOVS     r3,#1                 ;1051
000028  e020              B        |L13.108|
00002a  1e6d              SUBS     r5,r5,#1              ;1051
00002c  062b              LSLS     r3,r5,#24             ;1055
00002e  0e1b              LSRS     r3,r3,#24             ;1055
000030  7093              STRB     r3,[r2,#2]            ;1055
000032  d11c              BNE      |L13.110|
000034  2302              MOVS     r3,#2                 ;1057
000036  e019              B        |L13.108|
000038  1c64              ADDS     r4,r4,#1              ;1057
00003a  b2e3              UXTB     r3,r4
00003c  7113              STRB     r3,[r2,#4]
;;;1062   			if (Blue == 255)
00003e  2bff              CMP      r3,#0xff
000040  d115              BNE      |L13.110|
;;;1063   				State = 3;			
000042  2303              MOVS     r3,#3
000044  e012              B        |L13.108|
000046  1e76              SUBS     r6,r6,#1
;;;1064   			break;
;;;1065   		}
;;;1066   		case 3:{
;;;1067   			Green--;
000048  0633              LSLS     r3,r6,#24
00004a  0e1b              LSRS     r3,r3,#24
00004c  70d3              STRB     r3,[r2,#3]
;;;1068   			if (Green == 0)
00004e  d10e              BNE      |L13.110|
;;;1069   				State = 4;
000050  2304              MOVS     r3,#4
000052  e00b              B        |L13.108|
000054  1c6d              ADDS     r5,r5,#1
;;;1070   			break;
;;;1071   		}
;;;1072   		case 4:{
;;;1073   			Red++;
000056  b2eb              UXTB     r3,r5
000058  7093              STRB     r3,[r2,#2]
;;;1074   			if (Red == 255)
00005a  2bff              CMP      r3,#0xff
00005c  d107              BNE      |L13.110|
;;;1075   				State = 5;
00005e  2305              MOVS     r3,#5
000060  e004              B        |L13.108|
000062  1e64              SUBS     r4,r4,#1
;;;1076   			break;
;;;1077   		}
;;;1078   		case 5:{
;;;1079   			Blue --;
000064  0623              LSLS     r3,r4,#24
000066  0e1b              LSRS     r3,r3,#24
000068  7113              STRB     r3,[r2,#4]
;;;1080   			if (Blue == 0)
00006a  d100              BNE      |L13.110|
                  |L13.108|
;;;1081   				State = 0;
00006c  7153              STRB     r3,[r2,#5]
                  |L13.110|
;;;1082   			break;
;;;1083   		}		
;;;1084   	}
;;;1085   
;;;1086   	*GREEN = Green;
00006e  78d3              LDRB     r3,[r2,#3]  ; Green
000070  700b              STRB     r3,[r1,#0]
;;;1087   	*RED = Red;
000072  7891              LDRB     r1,[r2,#2]  ; Red
000074  7001              STRB     r1,[r0,#0]
;;;1088   	*BLUE = Blue;	
000076  9802              LDR      r0,[sp,#8]
000078  7911              LDRB     r1,[r2,#4]  ; Blue
00007a  7001              STRB     r1,[r0,#0]
;;;1089   //	return (Green << 16) + (Red << 8) + Blue;
;;;1090   
;;;1091   
;;;1092   }
00007c  bdfe              POP      {r1-r7,pc}
;;;1093   
                          ENDP

00007e  0000              DCW      0x0000
                  |L13.128|
                          DCD      ||.data||

                          AREA ||i._stripEffect_Wheel||, CODE, READONLY, ALIGN=1

                  _stripEffect_Wheel PROC
;;;1093   
;;;1094   uint8_t _stripEffect_Wheel(uint8_t WheelPos , uint8_t* RED, uint8_t* GREEN, uint8_t* BLUE) 
000000  b570              PUSH     {r4-r6,lr}
;;;1095   {
;;;1096   	WheelPos = 255 - WheelPos;
000002  24ff              MOVS     r4,#0xff
000004  1a20              SUBS     r0,r4,r0
000006  2500              MOVS     r5,#0
;;;1097   	if(WheelPos < 85) 
000008  2855              CMP      r0,#0x55
00000a  d205              BCS      |L14.24|
;;;1098   	{
;;;1099   		*GREEN = 0;
00000c  7015              STRB     r5,[r2,#0]
;;;1100   		*RED = 255 - WheelPos * 3;
00000e  0042              LSLS     r2,r0,#1
000010  1880              ADDS     r0,r0,r2
000012  1a22              SUBS     r2,r4,r0
000014  700a              STRB     r2,[r1,#0]
;;;1101   		*BLUE = WheelPos * 3;
;;;1102   		return 0;
000016  e007              B        |L14.40|
                  |L14.24|
;;;1103   		
;;;1104   //		return PACK_RGB(255 - WheelPos * 3, 0, WheelPos * 3);
;;;1105   	}
;;;1106   	if(WheelPos < 170) 
000018  28aa              CMP      r0,#0xaa
00001a  d207              BCS      |L14.44|
00001c  3855              SUBS     r0,r0,#0x55
;;;1107   	{
;;;1108   		WheelPos -= 85;
;;;1109   
;;;1110   		*GREEN = WheelPos * 3;
00001e  0046              LSLS     r6,r0,#1
000020  1980              ADDS     r0,r0,r6
000022  7010              STRB     r0,[r2,#0]
;;;1111   		*RED = 0;
000024  700d              STRB     r5,[r1,#0]
;;;1112   		*BLUE = 255 - WheelPos * 3;
000026  1a20              SUBS     r0,r4,r0
                  |L14.40|
000028  7018              STRB     r0,[r3,#0]            ;1101
00002a  e006              B        |L14.58|
                  |L14.44|
00002c  38aa              SUBS     r0,r0,#0xaa           ;1101
;;;1113   		return 0;
;;;1114   		
;;;1115   //		return PACK_RGB(0, WheelPos * 3, 255 - WheelPos * 3);
;;;1116   	}
;;;1117   	
;;;1118   	WheelPos -= 170;
;;;1119   
;;;1120   	*GREEN = 255 - WheelPos * 3;
00002e  0046              LSLS     r6,r0,#1
000030  1980              ADDS     r0,r0,r6
000032  1a24              SUBS     r4,r4,r0
000034  7014              STRB     r4,[r2,#0]
;;;1121   	*RED = WheelPos * 3;
000036  7008              STRB     r0,[r1,#0]
;;;1122   	*BLUE = 0;
000038  701d              STRB     r5,[r3,#0]
                  |L14.58|
;;;1123   	return 0;
00003a  2000              MOVS     r0,#0
;;;1124   	
;;;1125   //	return PACK_RGB(WheelPos * 3, 255 - WheelPos * 3, 0);
;;;1126   }
00003c  bd70              POP      {r4-r6,pc}
;;;1127   
                          ENDP


                          AREA ||i.delay||, CODE, READONLY, ALIGN=1

                  delay PROC
                  |L15.0|
;;;870    
;;;871    void delay(uint16_t dly)
000000  4601              MOV      r1,r0
;;;872    {
;;;873    /*
;;;874    	delay(100) : 14.84 us
;;;875    	delay(200) : 29.37 us
;;;876    	delay(300) : 43.97 us
;;;877    	delay(400) : 58.5 us	
;;;878    	delay(500) : 73.13 us	
;;;879    	
;;;880    	delay(1500) : 0.218 ms (218 us)
;;;881    	delay(2000) : 0.291 ms (291 us)	
;;;882    */
;;;883    
;;;884    	while( dly--);
000002  1e40              SUBS     r0,r0,#1
000004  b280              UXTH     r0,r0
000006  2900              CMP      r1,#0
000008  d1fa              BNE      |L15.0|
;;;885    }
00000a  4770              BX       lr
;;;886    
                          ENDP


                          AREA ||i.delay_ms||, CODE, READONLY, ALIGN=2

                  delay_ms PROC
;;;887    
;;;888    void delay_ms(uint16_t ms)
000000  217d              MOVS     r1,#0x7d
;;;889    {
;;;890    	TIMER_Delay(TIMER0, 1000*ms);
000002  00c9              LSLS     r1,r1,#3
000004  b510              PUSH     {r4,lr}               ;889
000006  4341              MULS     r1,r0,r1
000008  4801              LDR      r0,|L16.16|
00000a  f7fffffe          BL       TIMER_Delay
;;;891    }
00000e  bd10              POP      {r4,pc}
;;;892    
                          ENDP

                  |L16.16|
                          DCD      0x40050000

                          AREA ||i.getAllColors||, CODE, READONLY, ALIGN=2

                  getAllColors PROC
;;;1214   #if defined (ENABLE_EXTRA_DEMO)
;;;1215   void getAllColors(uint16_t time) 
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;1216   {
;;;1217   	uint16_t index = 0 ;
000002  2500              MOVS     r5,#0
                  |L17.4|
;;;1218   	uint8_t led = 0;
;;;1219   
;;;1220   	for (index = 0;index < COLORTALBE_NUM;index++)
;;;1221   	{
;;;1222   		#if 1
;;;1223   		for (led = 0; led < LED_NUM; led++)
;;;1224   		{
;;;1225   			setLED_Color(led,colorsFull[index][0],colorsFull[index][1],colorsFull[index][2]);			
000004  0068              LSLS     r0,r5,#1
000006  182f              ADDS     r7,r5,r0
000008  480c              LDR      r0,|L17.60|
00000a  2400              MOVS     r4,#0                 ;1223
00000c  183e              ADDS     r6,r7,r0
                  |L17.14|
00000e  480b              LDR      r0,|L17.60|
000010  78b3              LDRB     r3,[r6,#2]
000012  5dc1              LDRB     r1,[r0,r7]
000014  7872              LDRB     r2,[r6,#1]
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       setLED_Color
00001c  1c64              ADDS     r4,r4,#1
00001e  b2e4              UXTB     r4,r4                 ;1223
000020  2c12              CMP      r4,#0x12              ;1223
000022  d3f4              BCC      |L17.14|
;;;1226   		}
;;;1227   	
;;;1228   		#else
;;;1229   		for (led = 0; led < LED_NUM; led++)
;;;1230   		{
;;;1231   			setLED_Color(led,colorsFull[index + led][0],colorsFull[index + led][1],colorsFull[index + led][2]);
;;;1232   			
;;;1233   		}
;;;1234   	
;;;1235   		if ((index + led) >= COLORTALBE_NUM)
;;;1236   			index = 0;
;;;1237   		#endif
;;;1238   
;;;1239   		setLED_Display(LED_DATA_LEN);
000024  2036              MOVS     r0,#0x36
000026  f7fffffe          BL       setLED_Display
;;;1240   		
;;;1241   		delay_ms(time);
00002a  9800              LDR      r0,[sp,#0]
00002c  f7fffffe          BL       delay_ms
000030  1c6d              ADDS     r5,r5,#1
000032  4803              LDR      r0,|L17.64|
000034  b2ad              UXTH     r5,r5                 ;1220
000036  4285              CMP      r5,r0                 ;1220
000038  d3e4              BCC      |L17.4|
;;;1242   	}
;;;1243   }
00003a  bdf8              POP      {r3-r7,pc}
;;;1244   
                          ENDP

                  |L17.60|
                          DCD      ||.constdata||
                  |L17.64|
                          DCD      0x000002fe

                          AREA ||i.getAlternateColors||, CODE, READONLY, ALIGN=1

                  getAlternateColors PROC
;;;1315   
;;;1316   void getAlternateColors(uint16_t time, uint16_t steps,
000000  b5ff              PUSH     {r0-r7,lr}
;;;1317   		uint8_t redA, uint8_t greenA, uint8_t blueA, 
;;;1318   		uint8_t redB, uint8_t greenB, uint8_t blueB) 
;;;1319   {
000002  b083              SUB      sp,sp,#0xc
;;;1320   	uint16_t i = 0;
;;;1321   	signed long  deltaRed, deltaGreen, deltaBlue;
;;;1322   
;;;1323   	deltaRed = ((signed long) redB - (signed long) redA) / steps;
000004  980d              LDR      r0,[sp,#0x34]
000006  4617              MOV      r7,r2                 ;1319
000008  461e              MOV      r6,r3                 ;1319
00000a  2400              MOVS     r4,#0                 ;1320
00000c  1bc0              SUBS     r0,r0,r7
00000e  9d0e              LDR      r5,[sp,#0x38]
000010  9904              LDR      r1,[sp,#0x10]
000012  f7fffffe          BL       __aeabi_idivmod
;;;1324   	deltaGreen = ((signed long) greenB - (signed long) greenA) / steps;
000016  9001              STR      r0,[sp,#4]
000018  1ba8              SUBS     r0,r5,r6
00001a  9904              LDR      r1,[sp,#0x10]
00001c  f7fffffe          BL       __aeabi_idivmod
;;;1325   	deltaBlue = ((signed long) blueB - (signed long) blueA) / steps;
000020  9000              STR      r0,[sp,#0]
000022  990c              LDR      r1,[sp,#0x30]
000024  980f              LDR      r0,[sp,#0x3c]
000026  1a40              SUBS     r0,r0,r1
000028  9904              LDR      r1,[sp,#0x10]
00002a  f7fffffe          BL       __aeabi_idivmod
00002e  4605              MOV      r5,r0
;;;1326   
;;;1327   	for (i = 0; i < steps; i++) 
000030  e019              B        |L18.102|
                  |L18.50|
000032  4620              MOV      r0,r4
;;;1328   	{
;;;1329   		setLED_ColorWipe(redA + i * deltaRed, greenA + i * deltaGreen,	+blueA + i * deltaBlue);
000034  990c              LDR      r1,[sp,#0x30]
000036  4368              MULS     r0,r5,r0
000038  1840              ADDS     r0,r0,r1
00003a  b2c2              UXTB     r2,r0
00003c  9800              LDR      r0,[sp,#0]
00003e  4360              MULS     r0,r4,r0
000040  1980              ADDS     r0,r0,r6
000042  b2c1              UXTB     r1,r0
000044  9801              LDR      r0,[sp,#4]
000046  4360              MULS     r0,r4,r0
000048  19c0              ADDS     r0,r0,r7
00004a  b2c0              UXTB     r0,r0
00004c  f7fffffe          BL       setLED_ColorWipe
;;;1330   
;;;1331   		delay(time / steps);
000050  9904              LDR      r1,[sp,#0x10]
000052  9803              LDR      r0,[sp,#0xc]
000054  f7fffffe          BL       __aeabi_uidivmod
                  |L18.88|
000058  4601              MOV      r1,r0
00005a  1e40              SUBS     r0,r0,#1
00005c  b280              UXTH     r0,r0
00005e  2900              CMP      r1,#0
000060  d1fa              BNE      |L18.88|
000062  1c64              ADDS     r4,r4,#1
000064  b2a4              UXTH     r4,r4                 ;1327
                  |L18.102|
000066  9804              LDR      r0,[sp,#0x10]         ;1327
000068  4284              CMP      r4,r0                 ;1327
00006a  d3e2              BCC      |L18.50|
00006c  1e40              SUBS     r0,r0,#1              ;1327
;;;1332   	}
;;;1333   	for (i = steps - 1; i > 0; i--) 
00006e  b284              UXTH     r4,r0
000070  e019              B        |L18.166|
                  |L18.114|
000072  4620              MOV      r0,r4
;;;1334   	{
;;;1335   		setLED_ColorWipe(redA + i * deltaRed, greenA + i * deltaGreen,	+blueA + i * deltaBlue);
000074  990c              LDR      r1,[sp,#0x30]
000076  4368              MULS     r0,r5,r0
000078  1840              ADDS     r0,r0,r1
00007a  b2c2              UXTB     r2,r0
00007c  9800              LDR      r0,[sp,#0]
00007e  4360              MULS     r0,r4,r0
000080  1980              ADDS     r0,r0,r6
000082  b2c1              UXTB     r1,r0
000084  9801              LDR      r0,[sp,#4]
000086  4360              MULS     r0,r4,r0
000088  19c0              ADDS     r0,r0,r7
00008a  b2c0              UXTB     r0,r0
00008c  f7fffffe          BL       setLED_ColorWipe
;;;1336   		
;;;1337   		delay(time / steps);
000090  9904              LDR      r1,[sp,#0x10]
000092  9803              LDR      r0,[sp,#0xc]
000094  f7fffffe          BL       __aeabi_uidivmod
                  |L18.152|
000098  4601              MOV      r1,r0
00009a  1e40              SUBS     r0,r0,#1
00009c  b280              UXTH     r0,r0
00009e  2900              CMP      r1,#0
0000a0  d1fa              BNE      |L18.152|
0000a2  1e64              SUBS     r4,r4,#1
0000a4  b2a4              UXTH     r4,r4                 ;1333
                  |L18.166|
0000a6  2c00              CMP      r4,#0                 ;1333
0000a8  d1e3              BNE      |L18.114|
;;;1338   	}
;;;1339   }
0000aa  b007              ADD      sp,sp,#0x1c
0000ac  bdf0              POP      {r4-r7,pc}
;;;1340   
                          ENDP


                          AREA ||i.getBreathing||, CODE, READONLY, ALIGN=2

                  getBreathing PROC
;;;1473   
;;;1474   void getBreathing(uint16_t time)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;1475   {
;;;1476   //	uint8_t i = 0;
;;;1477   	uint16_t j = 0;
;;;1478   	static uint8_t flag = 1;
;;;1479   	uint8_t led = 0;
;;;1480   	uint16_t index = 0 ;
;;;1481   	uint8_t red,green,blue = 0;
;;;1482   
;;;1483   	red = colorsFull[index][0];
000002  4819              LDR      r0,|L19.104|
000004  b084              SUB      sp,sp,#0x10           ;1475
000006  7801              LDRB     r1,[r0,#0]
;;;1484   	green = colorsFull[index][1];
000008  9102              STR      r1,[sp,#8]
00000a  7841              LDRB     r1,[r0,#1]
;;;1485   	blue = colorsFull[index][2];
00000c  9101              STR      r1,[sp,#4]
00000e  7880              LDRB     r0,[r0,#2]
;;;1486   	
;;;1487   	if (flag)
000010  4d16              LDR      r5,|L19.108|
000012  2400              MOVS     r4,#0                 ;1479
000014  9000              STR      r0,[sp,#0]
000016  7a28              LDRB     r0,[r5,#8]  ; flag
000018  4626              MOV      r6,r4                 ;1480
00001a  4627              MOV      r7,r4                 ;1483
00001c  2800              CMP      r0,#0
00001e  d012              BEQ      |L19.70|
                  |L19.32|
;;;1488   	{
;;;1489   		for (led = 0; led < LED_NUM; led++)
;;;1490   		{
;;;1491   			setLED_Color(led,red,green,blue);			
000020  4620              MOV      r0,r4
000022  9b00              LDR      r3,[sp,#0]
000024  9a01              LDR      r2,[sp,#4]
000026  9902              LDR      r1,[sp,#8]
000028  f7fffffe          BL       setLED_Color
00002c  1c64              ADDS     r4,r4,#1
00002e  b2e4              UXTB     r4,r4                 ;1489
000030  2c12              CMP      r4,#0x12              ;1489
000032  d3f5              BCC      |L19.32|
;;;1492   		}
;;;1493   		setLED_Display(LED_DATA_LEN);
000034  2036              MOVS     r0,#0x36
000036  f7fffffe          BL       setLED_Display
;;;1494   		delay_ms(time);	
00003a  9804              LDR      r0,[sp,#0x10]
00003c  f7fffffe          BL       delay_ms
;;;1495   		flag = 0;
000040  722f              STRB     r7,[r5,#8]
                  |L19.66|
;;;1496   	}
;;;1497   	else
;;;1498   	{
;;;1499   		for (j=0xFF;j>0x7F;j--)
;;;1500   		{
;;;1501   			setLED_ColorWipe(j,j,j);
;;;1502   			delay_ms(time);
;;;1503   		}
;;;1504   		flag = 1;
;;;1505   	}
;;;1506   
;;;1507   	if ((index++) > COLORTALBE_NUM)
;;;1508   	{
;;;1509   		index = 0;
;;;1510   	}
;;;1511   	
;;;1512   }
000042  b005              ADD      sp,sp,#0x14
000044  bdf0              POP      {r4-r7,pc}
                  |L19.70|
000046  24ff              MOVS     r4,#0xff              ;1499
                  |L19.72|
000048  b2e2              UXTB     r2,r4                 ;1501
00004a  b2e1              UXTB     r1,r4                 ;1501
00004c  b2e0              UXTB     r0,r4                 ;1501
00004e  f7fffffe          BL       setLED_ColorWipe
000052  9804              LDR      r0,[sp,#0x10]         ;1502
000054  f7fffffe          BL       delay_ms
000058  1e64              SUBS     r4,r4,#1              ;1502
00005a  b2a4              UXTH     r4,r4                 ;1499
00005c  2c7f              CMP      r4,#0x7f              ;1499
00005e  d8f3              BHI      |L19.72|
000060  2001              MOVS     r0,#1                 ;1504
000062  7228              STRB     r0,[r5,#8]            ;1504
000064  e7ed              B        |L19.66|
;;;1513   
                          ENDP

000066  0000              DCW      0x0000
                  |L19.104|
                          DCD      ||.constdata||
                  |L19.108|
                          DCD      ||.data||

                          AREA ||i.getCircularRing||, CODE, READONLY, ALIGN=1

                  getCircularRing PROC
;;;1146   
;;;1147   void getCircularRing(uint16_t time, uint8_t red, uint8_t green,uint8_t blue) 
000000  b5ff              PUSH     {r0-r7,lr}
;;;1148   {
000002  b081              SUB      sp,sp,#4
000004  461d              MOV      r5,r3
000006  4616              MOV      r6,r2
000008  460f              MOV      r7,r1
;;;1149   	uint8_t index = 0 ;
00000a  2400              MOVS     r4,#0
                  |L20.12|
;;;1150   
;;;1151   	for (index = 0; index < LED_NUM; index++) 
;;;1152   	{
;;;1153   		setLED_ColorWipe(0, 0, 0);
00000c  2200              MOVS     r2,#0
00000e  4611              MOV      r1,r2
000010  4610              MOV      r0,r2
000012  f7fffffe          BL       setLED_ColorWipe
;;;1154   		
;;;1155   		setLED_Color(index, red, green, blue);
000016  462b              MOV      r3,r5
000018  4632              MOV      r2,r6
00001a  4639              MOV      r1,r7
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       setLED_Color
;;;1156   
;;;1157       	setLED_Display(LED_DATA_LEN);
000022  2036              MOVS     r0,#0x36
000024  f7fffffe          BL       setLED_Display
;;;1158   
;;;1159   		delay_ms(time);
000028  9801              LDR      r0,[sp,#4]
00002a  f7fffffe          BL       delay_ms
00002e  1c64              ADDS     r4,r4,#1
000030  b2e4              UXTB     r4,r4                 ;1151
000032  2c12              CMP      r4,#0x12              ;1151
000034  d3ea              BCC      |L20.12|
;;;1160   	}
;;;1161   }
000036  b005              ADD      sp,sp,#0x14
000038  bdf0              POP      {r4-r7,pc}
;;;1162   
                          ENDP


                          AREA ||i.getColorWheel||, CODE, READONLY, ALIGN=2

                  getColorWheel PROC
;;;1244   
;;;1245   void getColorWheel(uint16_t time) 
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;1246   {
;;;1247   	uint16_t index = 0 ;
000002  2500              MOVS     r5,#0
;;;1248   	uint8_t led = 0, colorIndex = 0;
;;;1249   
;;;1250   	for (led = 0; led < LED_NUM; led++) 
;;;1251   	{
;;;1252   		colorIndex = (index + led * (COLORTALBE_NUM / LED_NUM)) % COLORTALBE_NUM;
000004  4e11              LDR      r6,|L21.76|
;;;1253   		
;;;1254   		setLED_Color(led, colorsFull[colorIndex][0],	colorsFull[colorIndex][1], colorsFull[colorIndex][2]);
000006  4f12              LDR      r7,|L21.80|
000008  462c              MOV      r4,r5                 ;1248
                  |L21.10|
00000a  202a              MOVS     r0,#0x2a              ;1252
00000c  4360              MULS     r0,r4,r0              ;1252
00000e  1940              ADDS     r0,r0,r5              ;1252
000010  4631              MOV      r1,r6                 ;1252
000012  f7fffffe          BL       __aeabi_uidivmod
000016  b2c8              UXTB     r0,r1                 ;1252
000018  0041              LSLS     r1,r0,#1
00001a  1840              ADDS     r0,r0,r1
00001c  19c1              ADDS     r1,r0,r7
00001e  788b              LDRB     r3,[r1,#2]
000020  784a              LDRB     r2,[r1,#1]
000022  5c39              LDRB     r1,[r7,r0]
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       setLED_Color
;;;1255   
;;;1256   		setLED_Display(LED_DATA_LEN);
00002a  2036              MOVS     r0,#0x36
00002c  f7fffffe          BL       setLED_Display
;;;1257   
;;;1258   		delay_ms(time);	
000030  9800              LDR      r0,[sp,#0]
000032  f7fffffe          BL       delay_ms
000036  352a              ADDS     r5,r5,#0x2a
;;;1259   
;;;1260   		index += (COLORTALBE_NUM / LED_NUM);
000038  b2a8              UXTH     r0,r5
;;;1261   		index %= COLORTALBE_NUM;		
00003a  4631              MOV      r1,r6
00003c  f7fffffe          BL       __aeabi_uidivmod
000040  1c64              ADDS     r4,r4,#1
000042  b2e4              UXTB     r4,r4                 ;1250
000044  460d              MOV      r5,r1
000046  2c12              CMP      r4,#0x12              ;1250
000048  d3df              BCC      |L21.10|
;;;1262   	}
;;;1263   }
00004a  bdf8              POP      {r3-r7,pc}
;;;1264   #endif /*ENABLE_EXTRA_DEMO*/
                          ENDP

                  |L21.76|
                          DCD      0x000002fe
                  |L21.80|
                          DCD      ||.constdata||

                          AREA ||i.getFromAToB||, CODE, READONLY, ALIGN=1

                  getFromAToB PROC
;;;1127   
;;;1128   void getFromAToB(uint16_t time, uint16_t steps, 
000000  b5ff              PUSH     {r0-r7,lr}
;;;1129   		uint8_t redA,	uint8_t greenA, uint8_t blueA, 
;;;1130   		uint8_t redB, uint8_t greenB, uint8_t blueB) 
;;;1131   {
000002  b083              SUB      sp,sp,#0xc
;;;1132   	uint16_t i = 0;
;;;1133   	signed int deltaRed, deltaGreen, deltaBlue;
;;;1134   
;;;1135   	deltaRed = ((signed long) redB - (signed long) redA) / (signed long) steps;
000004  980d              LDR      r0,[sp,#0x34]
000006  4617              MOV      r7,r2                 ;1131
000008  461e              MOV      r6,r3                 ;1131
00000a  2400              MOVS     r4,#0                 ;1132
00000c  1bc0              SUBS     r0,r0,r7
00000e  9d0e              LDR      r5,[sp,#0x38]
000010  9904              LDR      r1,[sp,#0x10]
000012  f7fffffe          BL       __aeabi_idivmod
;;;1136   	deltaGreen = ((signed long) greenB - (signed long) greenA) / (signed long) steps;
000016  9001              STR      r0,[sp,#4]
000018  1ba8              SUBS     r0,r5,r6
00001a  9904              LDR      r1,[sp,#0x10]
00001c  f7fffffe          BL       __aeabi_idivmod
;;;1137   	deltaBlue = ((signed long) blueB - (signed long) blueA) / (signed long) steps;
000020  9000              STR      r0,[sp,#0]
000022  990c              LDR      r1,[sp,#0x30]
000024  980f              LDR      r0,[sp,#0x3c]
000026  1a40              SUBS     r0,r0,r1
000028  9904              LDR      r1,[sp,#0x10]
00002a  f7fffffe          BL       __aeabi_idivmod
00002e  4605              MOV      r5,r0
;;;1138   
;;;1139   	for (i = 0; i < steps; i++) 
000030  e019              B        |L22.102|
                  |L22.50|
000032  4620              MOV      r0,r4
;;;1140   	{
;;;1141   		setLED_ColorWipe(redA + i * deltaRed, greenA + i * deltaGreen,	+blueA + i * deltaBlue);
000034  990c              LDR      r1,[sp,#0x30]
000036  4368              MULS     r0,r5,r0
000038  1840              ADDS     r0,r0,r1
00003a  b2c2              UXTB     r2,r0
00003c  9800              LDR      r0,[sp,#0]
00003e  4360              MULS     r0,r4,r0
000040  1980              ADDS     r0,r0,r6
000042  b2c1              UXTB     r1,r0
000044  9801              LDR      r0,[sp,#4]
000046  4360              MULS     r0,r4,r0
000048  19c0              ADDS     r0,r0,r7
00004a  b2c0              UXTB     r0,r0
00004c  f7fffffe          BL       setLED_ColorWipe
;;;1142   	
;;;1143   		delay(time / steps);
000050  9904              LDR      r1,[sp,#0x10]
000052  9803              LDR      r0,[sp,#0xc]
000054  f7fffffe          BL       __aeabi_uidivmod
                  |L22.88|
000058  4601              MOV      r1,r0
00005a  1e40              SUBS     r0,r0,#1
00005c  b280              UXTH     r0,r0
00005e  2900              CMP      r1,#0
000060  d1fa              BNE      |L22.88|
000062  1c64              ADDS     r4,r4,#1
000064  b2a4              UXTH     r4,r4                 ;1139
                  |L22.102|
000066  9804              LDR      r0,[sp,#0x10]         ;1139
000068  4284              CMP      r4,r0                 ;1139
00006a  d3e2              BCC      |L22.50|
;;;1144   	}
;;;1145   }
00006c  b007              ADD      sp,sp,#0x1c
00006e  bdf0              POP      {r4-r7,pc}
;;;1146   
                          ENDP


                          AREA ||i.getFullEmpty||, CODE, READONLY, ALIGN=1

                  getFullEmpty PROC
;;;1290   
;;;1291   void getFullEmpty(uint16_t time, uint8_t red, uint8_t green,uint8_t blue) 
000000  b5ff              PUSH     {r0-r7,lr}
;;;1292   {
;;;1293   	uint8_t index = 0 ;
000002  2400              MOVS     r4,#0
000004  4616              MOV      r6,r2                 ;1292
000006  460f              MOV      r7,r1                 ;1292
000008  b081              SUB      sp,sp,#4              ;1292
00000a  461d              MOV      r5,r3                 ;1292
;;;1294   
;;;1295   	setLED_ColorWipe(0, 0, 0);
00000c  4622              MOV      r2,r4
00000e  4621              MOV      r1,r4
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       setLED_ColorWipe
                  |L23.22|
;;;1296   
;;;1297   	for (index = 0; index < LED_NUM; index++) 
;;;1298   	{
;;;1299   		setLED_Color(index, red, green, blue);
000016  462b              MOV      r3,r5
000018  4632              MOV      r2,r6
00001a  4639              MOV      r1,r7
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       setLED_Color
;;;1300   
;;;1301   		setLED_Display(LED_DATA_LEN);
000022  2036              MOVS     r0,#0x36
000024  f7fffffe          BL       setLED_Display
;;;1302   		
;;;1303   		delay_ms(time);
000028  9801              LDR      r0,[sp,#4]
00002a  f7fffffe          BL       delay_ms
00002e  1c64              ADDS     r4,r4,#1
000030  b2e4              UXTB     r4,r4                 ;1297
000032  2c12              CMP      r4,#0x12              ;1297
000034  d3ef              BCC      |L23.22|
;;;1304   	}
;;;1305   
;;;1306   	for (index = 0; index < LED_NUM; index++) 
000036  2400              MOVS     r4,#0
                  |L23.56|
;;;1307   	{
;;;1308   		setLED_Color(index,0, 0, 0);
000038  2300              MOVS     r3,#0
00003a  461a              MOV      r2,r3
00003c  4619              MOV      r1,r3
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       setLED_Color
;;;1309   
;;;1310   		setLED_Display(LED_DATA_LEN);
000044  2036              MOVS     r0,#0x36
000046  f7fffffe          BL       setLED_Display
;;;1311   		
;;;1312   		delay_ms(time);
00004a  9801              LDR      r0,[sp,#4]
00004c  f7fffffe          BL       delay_ms
000050  1c64              ADDS     r4,r4,#1
000052  b2e4              UXTB     r4,r4                 ;1306
000054  2c12              CMP      r4,#0x12              ;1306
000056  d3ef              BCC      |L23.56|
;;;1313   	}
;;;1314   }
000058  b005              ADD      sp,sp,#0x14
00005a  bdf0              POP      {r4-r7,pc}
;;;1315   
                          ENDP


                          AREA ||i.getHeartBeat||, CODE, READONLY, ALIGN=1

                  getHeartBeat PROC
;;;1163   // the interval should be in the 300-1000 range for best visual effect
;;;1164   void getHeartBeat(uint16_t time, uint8_t red, uint8_t green,uint8_t blue) 
000000  b5ff              PUSH     {r0-r7,lr}
;;;1165   {
000002  b085              SUB      sp,sp,#0x14
;;;1166   	uint8_t redInc, greenInc, blueInc;
;;;1167   	uint8_t maxRed, maxGreen, maxBlue;
;;;1168   
;;;1169   	uint8_t index = 0 ;
;;;1170   	uint8_t beatcnt = 35 ;
000004  2023              MOVS     r0,#0x23
;;;1171   	
;;;1172   	redInc = red / HEARTBEAT_STEPS;
000006  09cf              LSRS     r7,r1,#7
;;;1173   	greenInc = green / HEARTBEAT_STEPS;
;;;1174   	blueInc = blue / HEARTBEAT_STEPS;
;;;1175   
;;;1176   	maxRed = redInc * (HEARTBEAT_STEPS - 1);
000008  9000              STR      r0,[sp,#0]
00000a  01f8              LSLS     r0,r7,#7
00000c  09d6              LSRS     r6,r2,#7              ;1173
00000e  1bc0              SUBS     r0,r0,r7
000010  b2c0              UXTB     r0,r0
;;;1177   	maxGreen = greenInc * (HEARTBEAT_STEPS - 1);
000012  9003              STR      r0,[sp,#0xc]
000014  01f0              LSLS     r0,r6,#7
000016  1b80              SUBS     r0,r0,r6
000018  b2c0              UXTB     r0,r0
00001a  09dd              LSRS     r5,r3,#7              ;1174
;;;1178   	maxBlue = blueInc * (HEARTBEAT_STEPS - 1);
00001c  9002              STR      r0,[sp,#8]
00001e  01e8              LSLS     r0,r5,#7
000020  1b40              SUBS     r0,r0,r5
000022  b2c0              UXTB     r0,r0
;;;1179   
;;;1180   	setLED_ColorWipe(0, 0, 0);
000024  2200              MOVS     r2,#0
000026  9001              STR      r0,[sp,#4]
000028  2400              MOVS     r4,#0                 ;1169
00002a  4611              MOV      r1,r2
00002c  4610              MOV      r0,r2
00002e  f7fffffe          BL       setLED_ColorWipe
000032  9800              LDR      r0,[sp,#0]            ;1170
000034  4601              MOV      r1,r0                 ;1170
000036  310f              ADDS     r1,r1,#0xf            ;1170
;;;1181   
;;;1182   	// first stroke
;;;1183   	for (index = 0; index < HEARTBEAT_STEPS; index++) 
;;;1184   	{
;;;1185   		setLED_ColorWipe(index * redInc, index * greenInc, index * blueInc);
;;;1186   	
;;;1187   		delay(time / (beatcnt+15));	//50
000038  9805              LDR      r0,[sp,#0x14]
00003a  f7fffffe          BL       __aeabi_uidivmod
00003e  9004              STR      r0,[sp,#0x10]
                  |L24.64|
000040  4620              MOV      r0,r4
000042  4368              MULS     r0,r5,r0              ;1185
000044  b2c2              UXTB     r2,r0                 ;1185
000046  4620              MOV      r0,r4                 ;1185
000048  4370              MULS     r0,r6,r0              ;1185
00004a  b2c1              UXTB     r1,r0                 ;1185
00004c  4620              MOV      r0,r4                 ;1185
00004e  4378              MULS     r0,r7,r0              ;1185
000050  b2c0              UXTB     r0,r0                 ;1185
000052  f7fffffe          BL       setLED_ColorWipe
000056  9804              LDR      r0,[sp,#0x10]         ;1185
                  |L24.88|
000058  4601              MOV      r1,r0                 ;1185
00005a  1e40              SUBS     r0,r0,#1              ;1185
00005c  b280              UXTH     r0,r0                 ;1185
00005e  2900              CMP      r1,#0                 ;1185
000060  d1fa              BNE      |L24.88|
000062  1c64              ADDS     r4,r4,#1              ;1185
000064  b2e4              UXTB     r4,r4                 ;1183
000066  2c80              CMP      r4,#0x80              ;1183
000068  d3ea              BCC      |L24.64|
00006a  9900              LDR      r1,[sp,#0]            ;1165
;;;1188   	}
;;;1189   	for (index = 0; index < HEARTBEAT_STEPS; index++) 
00006c  2400              MOVS     r4,#0
00006e  310a              ADDS     r1,r1,#0xa            ;1165
;;;1190   	{
;;;1191   		setLED_ColorWipe(maxRed - index * redInc, maxGreen - index * greenInc,maxBlue - index * blueInc);
;;;1192   		
;;;1193   		delay(time / (beatcnt+10));	//45
000070  9805              LDR      r0,[sp,#0x14]
000072  f7fffffe          BL       __aeabi_uidivmod
000076  9004              STR      r0,[sp,#0x10]
                  |L24.120|
000078  4620              MOV      r0,r4
00007a  9901              LDR      r1,[sp,#4]            ;1191
00007c  4368              MULS     r0,r5,r0              ;1191
00007e  1a08              SUBS     r0,r1,r0              ;1191
000080  b2c2              UXTB     r2,r0                 ;1191
000082  4620              MOV      r0,r4                 ;1191
000084  9902              LDR      r1,[sp,#8]            ;1191
000086  4370              MULS     r0,r6,r0              ;1191
000088  1a08              SUBS     r0,r1,r0              ;1191
00008a  b2c1              UXTB     r1,r0                 ;1191
00008c  4620              MOV      r0,r4                 ;1191
00008e  9b03              LDR      r3,[sp,#0xc]          ;1191
000090  4378              MULS     r0,r7,r0              ;1191
000092  1a18              SUBS     r0,r3,r0              ;1191
000094  b2c0              UXTB     r0,r0                 ;1191
000096  f7fffffe          BL       setLED_ColorWipe
00009a  9804              LDR      r0,[sp,#0x10]         ;1191
                  |L24.156|
00009c  4601              MOV      r1,r0                 ;1191
00009e  1e40              SUBS     r0,r0,#1              ;1191
0000a0  b280              UXTH     r0,r0                 ;1191
0000a2  2900              CMP      r1,#0                 ;1191
0000a4  d1fa              BNE      |L24.156|
0000a6  1c64              ADDS     r4,r4,#1              ;1191
0000a8  b2e4              UXTB     r4,r4                 ;1189
0000aa  2c80              CMP      r4,#0x80              ;1189
0000ac  d3e4              BCC      |L24.120|
0000ae  9900              LDR      r1,[sp,#0]            ;1165
;;;1194   	}
;;;1195   	
;;;1196   	// second stroke
;;;1197   	for (index = 0; index < HEARTBEAT_STEPS; index++) 
0000b0  2400              MOVS     r4,#0
0000b2  1d49              ADDS     r1,r1,#5              ;1165
;;;1198   	{
;;;1199   		setLED_ColorWipe(index * redInc, index * greenInc, index * blueInc);
;;;1200   		
;;;1201   		delay(time / (beatcnt+5));	//40
0000b4  9805              LDR      r0,[sp,#0x14]
0000b6  f7fffffe          BL       __aeabi_uidivmod
0000ba  9004              STR      r0,[sp,#0x10]
                  |L24.188|
0000bc  4620              MOV      r0,r4
0000be  4368              MULS     r0,r5,r0              ;1199
0000c0  b2c2              UXTB     r2,r0                 ;1199
0000c2  4620              MOV      r0,r4                 ;1199
0000c4  4370              MULS     r0,r6,r0              ;1199
0000c6  b2c1              UXTB     r1,r0                 ;1199
0000c8  4620              MOV      r0,r4                 ;1199
0000ca  4378              MULS     r0,r7,r0              ;1199
0000cc  b2c0              UXTB     r0,r0                 ;1199
0000ce  f7fffffe          BL       setLED_ColorWipe
0000d2  9804              LDR      r0,[sp,#0x10]         ;1199
                  |L24.212|
0000d4  4601              MOV      r1,r0                 ;1199
0000d6  1e40              SUBS     r0,r0,#1              ;1199
0000d8  b280              UXTH     r0,r0                 ;1199
0000da  2900              CMP      r1,#0                 ;1199
0000dc  d1fa              BNE      |L24.212|
0000de  1c64              ADDS     r4,r4,#1              ;1199
0000e0  b2e4              UXTB     r4,r4                 ;1197
0000e2  2c80              CMP      r4,#0x80              ;1197
0000e4  d3ea              BCC      |L24.188|
;;;1202   	}
;;;1203   	for (index = 0; index < HEARTBEAT_STEPS; index++) 
0000e6  2400              MOVS     r4,#0
;;;1204   	{
;;;1205   		setLED_ColorWipe(maxRed - index * redInc, maxGreen - index * greenInc,maxBlue - index * blueInc);
;;;1206   		
;;;1207   		delay(time / (beatcnt));	//35
0000e8  9900              LDR      r1,[sp,#0]
0000ea  9805              LDR      r0,[sp,#0x14]
0000ec  f7fffffe          BL       __aeabi_uidivmod
0000f0  9000              STR      r0,[sp,#0]
                  |L24.242|
0000f2  4620              MOV      r0,r4
0000f4  9901              LDR      r1,[sp,#4]            ;1205
0000f6  4368              MULS     r0,r5,r0              ;1205
0000f8  1a08              SUBS     r0,r1,r0              ;1205
0000fa  b2c2              UXTB     r2,r0                 ;1205
0000fc  4620              MOV      r0,r4                 ;1205
0000fe  9902              LDR      r1,[sp,#8]            ;1205
000100  4370              MULS     r0,r6,r0              ;1205
000102  1a08              SUBS     r0,r1,r0              ;1205
000104  b2c1              UXTB     r1,r0                 ;1205
000106  4620              MOV      r0,r4                 ;1205
000108  9b03              LDR      r3,[sp,#0xc]          ;1205
00010a  4378              MULS     r0,r7,r0              ;1205
00010c  1a18              SUBS     r0,r3,r0              ;1205
00010e  b2c0              UXTB     r0,r0                 ;1205
000110  f7fffffe          BL       setLED_ColorWipe
000114  9800              LDR      r0,[sp,#0]            ;1205
                  |L24.278|
000116  4601              MOV      r1,r0                 ;1205
000118  1e40              SUBS     r0,r0,#1              ;1205
00011a  b280              UXTH     r0,r0                 ;1205
00011c  2900              CMP      r1,#0                 ;1205
00011e  d1fa              BNE      |L24.278|
000120  1c64              ADDS     r4,r4,#1              ;1205
000122  b2e4              UXTB     r4,r4                 ;1203
000124  2c80              CMP      r4,#0x80              ;1203
000126  d3e4              BCC      |L24.242|
;;;1208   	}
;;;1209   	// relax..
;;;1210   	delay_ms(time);
000128  9805              LDR      r0,[sp,#0x14]
00012a  f7fffffe          BL       delay_ms
;;;1211   
;;;1212   }
00012e  b009              ADD      sp,sp,#0x24
000130  bdf0              POP      {r4-r7,pc}
;;;1213   
                          ENDP


                          AREA ||i.getPatternMove||, CODE, READONLY, ALIGN=1

                  getPatternMove PROC
;;;1265   
;;;1266   void getPatternMove(uint16_t time, uint16_t parts, uint8_t red,uint8_t green, uint8_t blue) 
000000  b5ff              PUSH     {r0-r7,lr}
;;;1267   {
000002  b081              SUB      sp,sp,#4
000004  460f              MOV      r7,r1
;;;1268   	uint8_t index = 0 ;
000006  2500              MOVS     r5,#0
;;;1269   	uint16_t indexStep;
;;;1270   	uint16_t i;
;;;1271   
;;;1272   	indexStep = LED_NUM / parts;
000008  2012              MOVS     r0,#0x12
00000a  f7fffffe          BL       __aeabi_uidivmod
;;;1273   
;;;1274   	setLED_ColorWipe(0, 0, 0);
00000e  2200              MOVS     r2,#0
000010  4606              MOV      r6,r0                 ;1272
000012  4611              MOV      r1,r2
000014  4610              MOV      r0,r2
000016  f7fffffe          BL       setLED_ColorWipe
                  |L25.26|
;;;1275   
;;;1276   	for (index = 0; index < LED_NUM; index++) 
;;;1277   	{
;;;1278   		setLED_ColorWipe(0, 0, 0);
00001a  2200              MOVS     r2,#0
00001c  4611              MOV      r1,r2
00001e  4610              MOV      r0,r2
000020  f7fffffe          BL       setLED_ColorWipe
;;;1279   		
;;;1280   		for (i = 0; i < parts; i++)
000024  2400              MOVS     r4,#0
000026  e00a              B        |L25.62|
                  |L25.40|
000028  4620              MOV      r0,r4
;;;1281   		{
;;;1282   			setLED_Color(index + i * indexStep, red, green, blue);
00002a  4370              MULS     r0,r6,r0
00002c  1940              ADDS     r0,r0,r5
00002e  b2c0              UXTB     r0,r0
000030  9b0a              LDR      r3,[sp,#0x28]
000032  9a04              LDR      r2,[sp,#0x10]
000034  9903              LDR      r1,[sp,#0xc]
000036  f7fffffe          BL       setLED_Color
00003a  1c64              ADDS     r4,r4,#1
00003c  b2a4              UXTH     r4,r4                 ;1280
                  |L25.62|
00003e  42bc              CMP      r4,r7                 ;1280
000040  d3f2              BCC      |L25.40|
;;;1283   		}
;;;1284   
;;;1285   		setLED_Display(LED_DATA_LEN);
000042  2036              MOVS     r0,#0x36
000044  f7fffffe          BL       setLED_Display
;;;1286   		
;;;1287   		delay_ms(time);
000048  9801              LDR      r0,[sp,#4]
00004a  f7fffffe          BL       delay_ms
00004e  1c6d              ADDS     r5,r5,#1
000050  b2ed              UXTB     r5,r5                 ;1276
000052  2d12              CMP      r5,#0x12              ;1276
000054  d3e1              BCC      |L25.26|
;;;1288   	}	
;;;1289   }
000056  b005              ADD      sp,sp,#0x14
000058  bdf0              POP      {r4-r7,pc}
;;;1290   
                          ENDP


                          AREA ||i.getRGBSequence||, CODE, READONLY, ALIGN=2

                  getRGBSequence PROC
;;;1341   
;;;1342   void getRGBSequence(uint16_t time) 
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;1343   {
;;;1344   	static uint8_t intensity = 0;
;;;1345   	static uint8_t sign = 0;
;;;1346   
;;;1347       uint8_t i = 0;
;;;1348       if (sign) 
000002  4921              LDR      r1,|L26.136|
000004  2400              MOVS     r4,#0                 ;1347
000006  79ca              LDRB     r2,[r1,#7]  ; sign
000008  4608              MOV      r0,r1
;;;1349   	{
;;;1350           intensity++;
00000a  7980              LDRB     r0,[r0,#6]
00000c  2a00              CMP      r2,#0                 ;1348
00000e  d006              BEQ      |L26.30|
000010  1c40              ADDS     r0,r0,#1              ;1343
000012  b2c0              UXTB     r0,r0
000014  7188              STRB     r0,[r1,#6]
;;;1351           if (intensity == 255) 
000016  28ff              CMP      r0,#0xff
000018  d108              BNE      |L26.44|
;;;1352               sign = 0; 
00001a  2000              MOVS     r0,#0
00001c  e005              B        |L26.42|
                  |L26.30|
00001e  1e40              SUBS     r0,r0,#1
;;;1353       }
;;;1354       else 
;;;1355   	{
;;;1356           intensity--;
000020  0600              LSLS     r0,r0,#24
000022  0e00              LSRS     r0,r0,#24
000024  7188              STRB     r0,[r1,#6]
;;;1357           if (intensity == 0)
000026  d101              BNE      |L26.44|
;;;1358               sign = 1;
000028  2001              MOVS     r0,#1
                  |L26.42|
00002a  71c8              STRB     r0,[r1,#7]            ;1352
                  |L26.44|
;;;1359       }
;;;1360   
;;;1361       for (i = 0; i < LED_NUM; i++) 
;;;1362   	{
;;;1363           setLED_Color(i, intensity*((i%3)%2),intensity*(((i+1)%3)%2),intensity*(((i+2)%3)%2));
00002c  2103              MOVS     r1,#3
00002e  1ca0              ADDS     r0,r4,#2
000030  f7fffffe          BL       __aeabi_uidivmod
000034  4814              LDR      r0,|L26.136|
000036  07c9              LSLS     r1,r1,#31
000038  7985              LDRB     r5,[r0,#6]  ; intensity
00003a  0fc9              LSRS     r1,r1,#31
00003c  4369              MULS     r1,r5,r1
00003e  b2cf              UXTB     r7,r1
000040  2103              MOVS     r1,#3
000042  1c60              ADDS     r0,r4,#1
000044  f7fffffe          BL       __aeabi_uidivmod
000048  07c8              LSLS     r0,r1,#31
00004a  0fc0              LSRS     r0,r0,#31
00004c  4368              MULS     r0,r5,r0
00004e  b2c6              UXTB     r6,r0
000050  2103              MOVS     r1,#3
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       __aeabi_uidivmod
000058  07c8              LSLS     r0,r1,#31
00005a  0fc0              LSRS     r0,r0,#31
00005c  4368              MULS     r0,r5,r0
00005e  b2c1              UXTB     r1,r0
000060  463b              MOV      r3,r7
000062  4632              MOV      r2,r6
000064  4620              MOV      r0,r4
000066  f7fffffe          BL       setLED_Color
;;;1364   
;;;1365   	    setLED_Display(LED_DATA_LEN);
00006a  2036              MOVS     r0,#0x36
00006c  f7fffffe          BL       setLED_Display
;;;1366   		
;;;1367   	    delay(time);			
000070  9800              LDR      r0,[sp,#0]
                  |L26.114|
000072  4601              MOV      r1,r0
000074  1e40              SUBS     r0,r0,#1
000076  b280              UXTH     r0,r0
000078  2900              CMP      r1,#0
00007a  d1fa              BNE      |L26.114|
00007c  1c64              ADDS     r4,r4,#1
00007e  b2e4              UXTB     r4,r4                 ;1361
000080  2c12              CMP      r4,#0x12              ;1361
000082  d3d3              BCC      |L26.44|
;;;1368       }
;;;1369   
;;;1370   }
000084  bdf8              POP      {r3-r7,pc}
;;;1371   
                          ENDP

000086  0000              DCW      0x0000
                  |L26.136|
                          DCD      ||.data||

                          AREA ||i.getRainbow||, CODE, READONLY, ALIGN=1

                  getRainbow PROC
;;;1456   
;;;1457   void getRainbow(uint16_t time)
000000  b53e              PUSH     {r1-r5,lr}
;;;1458   {
;;;1459   	uint8_t i = 0;
000002  2400              MOVS     r4,#0
;;;1460   	uint8_t red , green, blue = 0;
000004  4669              MOV      r1,sp
000006  4605              MOV      r5,r0                 ;1458
000008  700c              STRB     r4,[r1,#0]
                  |L27.10|
;;;1461   
;;;1462   	for (i=0;i<LED_NUM;i++)
;;;1463   	{
;;;1464   		_stripEffect_Rainbow(&red,&green,&blue);
00000a  466a              MOV      r2,sp
00000c  a901              ADD      r1,sp,#4
00000e  a802              ADD      r0,sp,#8
000010  f7fffffe          BL       _stripEffect_Rainbow
;;;1465   		setLED_Color(i,red,green,blue); // Output a colour Format: GGRRBB							
000014  4668              MOV      r0,sp
000016  7803              LDRB     r3,[r0,#0]
000018  7902              LDRB     r2,[r0,#4]
00001a  7a01              LDRB     r1,[r0,#8]
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       setLED_Color
000022  1c64              ADDS     r4,r4,#1
000024  b2e4              UXTB     r4,r4                 ;1462
000026  2c12              CMP      r4,#0x12              ;1462
000028  d3ef              BCC      |L27.10|
;;;1466   	}
;;;1467   	
;;;1468   	// Now send out the bits to the SPI bus
;;;1469   	setLED_Display(LED_DATA_LEN);  	
00002a  2036              MOVS     r0,#0x36
00002c  f7fffffe          BL       setLED_Display
;;;1470   
;;;1471   	delay_ms(time);	
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       delay_ms
;;;1472   }
000036  bd3e              POP      {r1-r5,pc}
;;;1473   
                          ENDP


                          AREA ||i.getRainbowCycle||, CODE, READONLY, ALIGN=1

                  getRainbowCycle PROC
;;;1431   
;;;1432   void getRainbowCycle(uint8_t cycle , uint16_t time) 
000000  b5fe              PUSH     {r1-r7,lr}
;;;1433   {
;;;1434   	uint16_t i = 0, j = 0;
000002  2500              MOVS     r5,#0
;;;1435   	uint8_t red , green, blue = 0;
000004  466a              MOV      r2,sp
000006  460f              MOV      r7,r1                 ;1433
000008  7015              STRB     r5,[r2,#0]
;;;1436   	
;;;1437   	for(j=0; j<256*cycle; j++) 
00000a  0206              LSLS     r6,r0,#8
00000c  e01e              B        |L28.76|
                  |L28.14|
;;;1438   	{ 
;;;1439   		// 5 cycles of all colors on wheel
;;;1440   		for(i=0; i< LED_NUM; i++) 
00000e  2400              MOVS     r4,#0
                  |L28.16|
;;;1441   		{
;;;1442   			_stripEffect_Wheel((((i * 256 / LED_NUM) + j) & 255),&red,&green,&blue);
000010  0220              LSLS     r0,r4,#8
000012  2112              MOVS     r1,#0x12
000014  f7fffffe          BL       __aeabi_uidivmod
000018  1940              ADDS     r0,r0,r5
00001a  b2c0              UXTB     r0,r0
00001c  466b              MOV      r3,sp
00001e  aa01              ADD      r2,sp,#4
000020  a902              ADD      r1,sp,#8
000022  f7fffffe          BL       _stripEffect_Wheel
;;;1443   			setLED_Color(i,red,green,blue);
000026  4669              MOV      r1,sp
000028  780b              LDRB     r3,[r1,#0]
00002a  790a              LDRB     r2,[r1,#4]
00002c  b2e0              UXTB     r0,r4
00002e  7a09              LDRB     r1,[r1,#8]
000030  f7fffffe          BL       setLED_Color
000034  1c64              ADDS     r4,r4,#1
000036  b2a4              UXTH     r4,r4                 ;1440
000038  2c12              CMP      r4,#0x12              ;1440
00003a  d3e9              BCC      |L28.16|
;;;1444   		
;;;1445   //			setLED_Color(i, 
;;;1446   //				UNPACK_R(_stripEffect_Wheel(((i * 256 / LED_NUM) + j) & 255)),
;;;1447   //				UNPACK_G(_stripEffect_Wheel(((i * 256 / LED_NUM) + j) & 255)),
;;;1448   //				UNPACK_B(_stripEffect_Wheel(((i * 256 / LED_NUM) + j) & 255)));
;;;1449   		}
;;;1450   		
;;;1451   		setLED_Display(LED_DATA_LEN);
00003c  2036              MOVS     r0,#0x36
00003e  f7fffffe          BL       setLED_Display
;;;1452   
;;;1453   		delay_ms(time);
000042  4638              MOV      r0,r7
000044  f7fffffe          BL       delay_ms
000048  1c6d              ADDS     r5,r5,#1
00004a  b2ad              UXTH     r5,r5                 ;1437
                  |L28.76|
00004c  42ae              CMP      r6,r5                 ;1437
00004e  d8de              BHI      |L28.14|
;;;1454   	}
;;;1455   }
000050  bdfe              POP      {r1-r7,pc}
;;;1456   
                          ENDP


                          AREA ||i.getTheaterChase||, CODE, READONLY, ALIGN=1

                  getTheaterChase PROC
;;;1404   
;;;1405   void getTheaterChase(uint16_t time ,uint8_t RED, uint8_t GREEN, uint8_t BLUE) 
000000  b5ff              PUSH     {r0-r7,lr}
;;;1406   {
000002  b081              SUB      sp,sp,#4
000004  461f              MOV      r7,r3
;;;1407   	uint16_t j = 0;
000006  2600              MOVS     r6,#0
                  |L29.8|
;;;1408   	uint16_t q = 0;
;;;1409   	uint16_t i = 0;
;;;1410   
;;;1411   	for (j=0; j<10; j++) 
;;;1412   	{  //do 10 cycles of chasing
;;;1413   		for (q=0; q < 3; q++) 
000008  2400              MOVS     r4,#0
                  |L29.10|
;;;1414   		{
;;;1415   			for (i=0; i < LED_NUM; i=i+3) 
00000a  2500              MOVS     r5,#0
                  |L29.12|
;;;1416   			{
;;;1417   				setLED_Color(i+q, RED,GREEN,BLUE);    //turn every third pixel on
00000c  1928              ADDS     r0,r5,r4
00000e  b2c0              UXTB     r0,r0
000010  463b              MOV      r3,r7
000012  9a03              LDR      r2,[sp,#0xc]
000014  9902              LDR      r1,[sp,#8]
000016  f7fffffe          BL       setLED_Color
00001a  1ced              ADDS     r5,r5,#3
00001c  b2ad              UXTH     r5,r5                 ;1415
00001e  2d12              CMP      r5,#0x12              ;1415
000020  d3f4              BCC      |L29.12|
;;;1418   			}
;;;1419   			setLED_Display(LED_DATA_LEN);
000022  2036              MOVS     r0,#0x36
000024  f7fffffe          BL       setLED_Display
;;;1420   
;;;1421   			delay_ms(time);
000028  9801              LDR      r0,[sp,#4]
00002a  f7fffffe          BL       delay_ms
;;;1422   
;;;1423   			for (i=0; i < LED_NUM; i=i+3) 
00002e  2500              MOVS     r5,#0
                  |L29.48|
;;;1424   			{
;;;1425   				setLED_Color(i+q, 0 , 0 , 0);        //turn every third pixel off
000030  2300              MOVS     r3,#0
000032  1928              ADDS     r0,r5,r4
000034  b2c0              UXTB     r0,r0
000036  461a              MOV      r2,r3
000038  4619              MOV      r1,r3
00003a  f7fffffe          BL       setLED_Color
00003e  1ced              ADDS     r5,r5,#3
000040  b2ad              UXTH     r5,r5                 ;1423
000042  2d12              CMP      r5,#0x12              ;1423
000044  d3f4              BCC      |L29.48|
000046  1c64              ADDS     r4,r4,#1              ;1423
000048  b2a4              UXTH     r4,r4                 ;1413
00004a  2c03              CMP      r4,#3                 ;1413
00004c  d3dd              BCC      |L29.10|
00004e  1c76              ADDS     r6,r6,#1              ;1413
000050  b2b6              UXTH     r6,r6                 ;1411
000052  2e0a              CMP      r6,#0xa               ;1411
000054  d3d8              BCC      |L29.8|
;;;1426   			}
;;;1427   		}
;;;1428   	}
;;;1429   }
000056  b005              ADD      sp,sp,#0x14
000058  bdf0              POP      {r4-r7,pc}
;;;1430   
                          ENDP


                          AREA ||i.getTheaterChaseRainbow||, CODE, READONLY, ALIGN=1

                  getTheaterChaseRainbow PROC
;;;1371   
;;;1372   void getTheaterChaseRainbow(uint16_t time) 
000000  b5fe              PUSH     {r1-r7,lr}
;;;1373   {
;;;1374   	uint16_t j = 0;
000002  2600              MOVS     r6,#0
;;;1375   	uint8_t q = 0; 
;;;1376   	uint16_t i=0;
;;;1377   	uint8_t red , green, blue = 0;
000004  4669              MOV      r1,sp
000006  4607              MOV      r7,r0                 ;1373
000008  700e              STRB     r6,[r1,#0]
                  |L30.10|
;;;1378   	
;;;1379   	for (j=0; j < 256; j++) 
;;;1380   	{     // cycle all 256 colors in the wheel
;;;1381   		for (q=0; q < 3; q++) 
00000a  2500              MOVS     r5,#0
                  |L30.12|
;;;1382   		{
;;;1383   			for (i=0; i < LED_NUM ; i=i+3) 
00000c  2400              MOVS     r4,#0
                  |L30.14|
;;;1384   			{				
;;;1385   				_stripEffect_Wheel(( (i+j) % 255),&red,&green,&blue);
00000e  19a0              ADDS     r0,r4,r6
000010  21ff              MOVS     r1,#0xff
000012  f7fffffe          BL       __aeabi_uidivmod
000016  4608              MOV      r0,r1
000018  466b              MOV      r3,sp
00001a  aa01              ADD      r2,sp,#4
00001c  a902              ADD      r1,sp,#8
00001e  f7fffffe          BL       _stripEffect_Wheel
;;;1386   				setLED_Color(i+q, red,green,blue);
000022  4669              MOV      r1,sp
000024  1960              ADDS     r0,r4,r5
000026  780b              LDRB     r3,[r1,#0]
000028  790a              LDRB     r2,[r1,#4]
00002a  b2c0              UXTB     r0,r0
00002c  7a09              LDRB     r1,[r1,#8]
00002e  f7fffffe          BL       setLED_Color
000032  1ce4              ADDS     r4,r4,#3
000034  b2a4              UXTH     r4,r4                 ;1383
000036  2c12              CMP      r4,#0x12              ;1383
000038  d3e9              BCC      |L30.14|
;;;1387   			
;;;1388   //				setLED_Color(i+q, 
;;;1389   //					UNPACK_R(_stripEffect_Wheel( (i+j) % 255)),
;;;1390   //					UNPACK_G(_stripEffect_Wheel( (i+j) % 255)),
;;;1391   //					UNPACK_B(_stripEffect_Wheel( (i+j) % 255)));    //turn every third pixel on
;;;1392   			}
;;;1393   			setLED_Display(LED_DATA_LEN);
00003a  2036              MOVS     r0,#0x36
00003c  f7fffffe          BL       setLED_Display
;;;1394   
;;;1395   			delay_ms(time);
000040  4638              MOV      r0,r7
000042  f7fffffe          BL       delay_ms
;;;1396   
;;;1397   			for (i=0; i < LED_NUM ; i=i+3) 
000046  2400              MOVS     r4,#0
                  |L30.72|
;;;1398   			{
;;;1399   				setLED_Color(i+q, 0 , 0 , 0);        //turn every third pixel off
000048  2300              MOVS     r3,#0
00004a  1960              ADDS     r0,r4,r5
00004c  b2c0              UXTB     r0,r0
00004e  461a              MOV      r2,r3
000050  4619              MOV      r1,r3
000052  f7fffffe          BL       setLED_Color
000056  1ce4              ADDS     r4,r4,#3
000058  b2a4              UXTH     r4,r4                 ;1397
00005a  2c12              CMP      r4,#0x12              ;1397
00005c  d3f4              BCC      |L30.72|
00005e  1c6d              ADDS     r5,r5,#1              ;1397
000060  b2ed              UXTB     r5,r5                 ;1381
000062  2d03              CMP      r5,#3                 ;1381
000064  d3d2              BCC      |L30.12|
000066  1c76              ADDS     r6,r6,#1              ;1381
000068  b2b6              UXTH     r6,r6                 ;1379
00006a  2eff              CMP      r6,#0xff              ;1379
00006c  d9cd              BLS      |L30.10|
;;;1400   			}
;;;1401   		}
;;;1402   	}
;;;1403   }
00006e  bdfe              POP      {r1-r7,pc}
;;;1404   
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  main PROC
;;;1731   
;;;1732   int main()
000000  f7fffffe          BL       SYS_Init
;;;1733   {
;;;1734       SYS_Init();
;;;1735   
;;;1736       SYS_ResetModule(UART0_RST);
000004  481a              LDR      r0,|L31.112|
000006  f7fffffe          BL       SYS_ResetModule
;;;1737   
;;;1738       /* Configure UART0 and set UART0 baud rate */
;;;1739       UART_Open(UART0, 115200);
00000a  4c1a              LDR      r4,|L31.116|
00000c  21e1              MOVS     r1,#0xe1
00000e  0249              LSLS     r1,r1,#9
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       UART_Open
;;;1740       UART_EnableInt(UART0, UART_INTEN_RDAIEN_Msk | UART_INTEN_RXTOIEN_Msk);
000016  2111              MOVS     r1,#0x11
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       UART_EnableInt
00001e  2001              MOVS     r0,#1
000020  4915              LDR      r1,|L31.120|
000022  0300              LSLS     r0,r0,#12
000024  6008              STR      r0,[r1,#0]
;;;1741       NVIC_EnableIRQ(UART02_IRQn);
;;;1742   	
;;;1743   	printf("\r\nCLK_GetCPUFreq : %8d\r\n",CLK_GetCPUFreq());
000026  f7fffffe          BL       CLK_GetCPUFreq
00002a  4601              MOV      r1,r0
00002c  a013              ADR      r0,|L31.124|
00002e  f7fffffe          BL       __2printf
;;;1744   	printf("CLK_GetHXTFreq : %8d\r\n",CLK_GetHXTFreq());
000032  f7fffffe          BL       CLK_GetHXTFreq
000036  4601              MOV      r1,r0
000038  a017              ADR      r0,|L31.152|
00003a  f7fffffe          BL       __2printf
;;;1745   	printf("CLK_GetLXTFreq : %8d\r\n",CLK_GetLXTFreq());	
00003e  f7fffffe          BL       CLK_GetLXTFreq
000042  4601              MOV      r1,r0
000044  a01a              ADR      r0,|L31.176|
000046  f7fffffe          BL       __2printf
;;;1746   	printf("CLK_GetPCLK0Freq : %8d\r\n",CLK_GetPCLK0Freq());
00004a  f7fffffe          BL       CLK_GetPCLK0Freq
00004e  4601              MOV      r1,r0
000050  a01d              ADR      r0,|L31.200|
000052  f7fffffe          BL       __2printf
;;;1747   	printf("CLK_GetPCLK1Freq : %8d\r\n",CLK_GetPCLK1Freq());	
000056  f7fffffe          BL       CLK_GetPCLK1Freq
00005a  4601              MOV      r1,r0
00005c  a021              ADR      r0,|L31.228|
00005e  f7fffffe          BL       __2printf
;;;1748   
;;;1749   //	GPIO_Init();
;;;1750   	TIMER1_Init();
000062  f7fffffe          BL       TIMER1_Init
;;;1751   
;;;1752   	WS2812C_Initial();
000066  f7fffffe          BL       WS2812C_Initial
                  |L31.106|
;;;1753   
;;;1754       /* Got no where to go, just loop forever */
;;;1755       while(1)
;;;1756       {
;;;1757   		#if defined (ENABLE_DEBUG_WS2812_PROTOCOL)
;;;1758   		setLED_ColorWipe(0xFF, 0x00, 0x00);
;;;1759   		delay_ms(1);
;;;1760   		#else
;;;1761   
;;;1762   		StateMachine();
00006a  f7fffffe          BL       StateMachine
00006e  e7fc              B        |L31.106|
;;;1763   		#endif
;;;1764   
;;;1765       }
;;;1766   }
;;;1767   
                          ENDP

                  |L31.112|
                          DCD      0x04000010
                  |L31.116|
                          DCD      0x40070000
                  |L31.120|
                          DCD      0xe000e100
                  |L31.124|
00007c  0d0a434c          DCB      "\r\nCLK_GetCPUFreq : %8d\r\n",0
000080  4b5f4765
000084  74435055
000088  46726571
00008c  203a2025
000090  38640d0a
000094  00      
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0
                  |L31.152|
000098  434c4b5f          DCB      "CLK_GetHXTFreq : %8d\r\n",0
00009c  47657448
0000a0  58544672
0000a4  6571203a
0000a8  20253864
0000ac  0d0a00  
0000af  00                DCB      0
                  |L31.176|
0000b0  434c4b5f          DCB      "CLK_GetLXTFreq : %8d\r\n",0
0000b4  4765744c
0000b8  58544672
0000bc  6571203a
0000c0  20253864
0000c4  0d0a00  
0000c7  00                DCB      0
                  |L31.200|
0000c8  434c4b5f          DCB      "CLK_GetPCLK0Freq : %8d\r\n",0
0000cc  47657450
0000d0  434c4b30
0000d4  46726571
0000d8  203a2025
0000dc  38640d0a
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L31.228|
0000e4  434c4b5f          DCB      "CLK_GetPCLK1Freq : %8d\r\n",0
0000e8  47657450
0000ec  434c4b31
0000f0  46726571
0000f4  203a2025
0000f8  38640d0a
0000fc  00      
0000fd  00                DCB      0
0000fe  00                DCB      0
0000ff  00                DCB      0

                          AREA ||i.setLED_BufferClear||, CODE, READONLY, ALIGN=2

                  setLED_BufferClear PROC
;;;977    
;;;978    void setLED_BufferClear(void)
000000  b510              PUSH     {r4,lr}
;;;979    {
;;;980    	memset(DataBuffer,0x00,LED_DATA_LEN);
000002  2136              MOVS     r1,#0x36
000004  4801              LDR      r0,|L32.12|
000006  f7fffffe          BL       __aeabi_memclr
;;;981    }
00000a  bd10              POP      {r4,pc}
;;;982    
                          ENDP

                  |L32.12|
                          DCD      ||.bss||

                          AREA ||i.setLED_Color||, CODE, READONLY, ALIGN=2

                  setLED_Color PROC
;;;982    
;;;983    void setLED_Color(uint8_t DeviceNumber ,uint8_t RED, uint8_t GREEN, uint8_t BLUE)	// Output a colour Format: GGRRBB	
000000  b510              PUSH     {r4,lr}
;;;984    {
;;;985    
;;;986    	DataBuffer[DeviceNumber*3]   = GREEN;
000002  0044              LSLS     r4,r0,#1
000004  1900              ADDS     r0,r0,r4
000006  4c03              LDR      r4,|L33.20|
000008  5422              STRB     r2,[r4,r0]
;;;987    	DataBuffer[DeviceNumber*3+1] = RED;
00000a  1900              ADDS     r0,r0,r4
00000c  7041              STRB     r1,[r0,#1]
;;;988    	DataBuffer[DeviceNumber*3+2] = BLUE;
00000e  7083              STRB     r3,[r0,#2]
;;;989    
;;;990    }
000010  bd10              POP      {r4,pc}
;;;991    
                          ENDP

000012  0000              DCW      0x0000
                  |L33.20|
                          DCD      ||.bss||

                          AREA ||i.setLED_ColorIdxChange||, CODE, READONLY, ALIGN=2

                  setLED_ColorIdxChange PROC
;;;1004   
;;;1005   void setLED_ColorIdxChange(void)
000000  490b              LDR      r1,|L34.48|
;;;1006   {
;;;1007   	static uint8_t flag = 1;
;;;1008   
;;;1009   	if (flag)		//reverse color index
000002  2200              MOVS     r2,#0
000004  784b              LDRB     r3,[r1,#1]  ; flag
000006  4608              MOV      r0,r1
;;;1010   	{
;;;1011   		if ( Coloridx >= (COLORTALBE_NUM-1))
000008  8940              LDRH     r0,[r0,#0xa]
00000a  2b00              CMP      r3,#0                 ;1009
00000c  d007              BEQ      |L34.30|
00000e  4b09              LDR      r3,|L34.52|
000010  4298              CMP      r0,r3
000012  d302              BCC      |L34.26|
;;;1012   		{
;;;1013   			flag = 0;
000014  704a              STRB     r2,[r1,#1]
;;;1014   			Coloridx = COLORTALBE_NUM-1;
000016  814b              STRH     r3,[r1,#0xa]
;;;1015   		}
;;;1016   		else
;;;1017   		{
;;;1018   			Coloridx++;
;;;1019   		}
;;;1020   	}
;;;1021   	else
;;;1022   	{
;;;1023   		if (Coloridx <= 0)
;;;1024   		{
;;;1025   			flag = 1;
;;;1026   			Coloridx = 0;	
;;;1027   		}
;;;1028   		else
;;;1029   		{
;;;1030   			Coloridx--;
;;;1031   		}
;;;1032   	}
;;;1033   	
;;;1034   }
000018  4770              BX       lr
                  |L34.26|
00001a  1c40              ADDS     r0,r0,#1
00001c  e002              B        |L34.36|
                  |L34.30|
00001e  2800              CMP      r0,#0                 ;1023
000020  d002              BEQ      |L34.40|
000022  1e40              SUBS     r0,r0,#1              ;1023
                  |L34.36|
000024  8148              STRH     r0,[r1,#0xa]          ;1018
000026  4770              BX       lr
                  |L34.40|
000028  2001              MOVS     r0,#1                 ;1025
00002a  7048              STRB     r0,[r1,#1]            ;1025
00002c  814a              STRH     r2,[r1,#0xa]          ;1026
00002e  4770              BX       lr
;;;1035   
                          ENDP

                  |L34.48|
                          DCD      ||.data||
                  |L34.52|
                          DCD      0x000002fd

                          AREA ||i.setLED_ColorWipe||, CODE, READONLY, ALIGN=1

                  setLED_ColorWipe PROC
;;;991    
;;;992    void setLED_ColorWipe(uint8_t RED, uint8_t GREEN, uint8_t BLUE) 
000000  b5f0              PUSH     {r4-r7,lr}
;;;993    {
000002  4615              MOV      r5,r2
000004  460e              MOV      r6,r1
000006  4607              MOV      r7,r0
;;;994    	uint8_t index = 0 ;
000008  2400              MOVS     r4,#0
                  |L35.10|
;;;995    
;;;996    	for (index = 0; index < LED_NUM; index++)
;;;997    	{
;;;998    		setLED_Color(index, RED, GREEN, BLUE);
00000a  462b              MOV      r3,r5
00000c  4632              MOV      r2,r6
00000e  4639              MOV      r1,r7
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       setLED_Color
000016  1c64              ADDS     r4,r4,#1
000018  b2e4              UXTB     r4,r4                 ;996
00001a  2c12              CMP      r4,#0x12              ;996
00001c  d3f5              BCC      |L35.10|
;;;999    	}
;;;1000   
;;;1001   	setLED_Display(LED_DATA_LEN);
00001e  2036              MOVS     r0,#0x36
000020  f7fffffe          BL       setLED_Display
;;;1002   }
000024  bdf0              POP      {r4-r7,pc}
;;;1003   
                          ENDP


                          AREA ||i.setLED_Display||, CODE, READONLY, ALIGN=2

                  setLED_Display PROC
;;;960    
;;;961    void setLED_Display(uint16_t DataCount)
000000  b570              PUSH     {r4-r6,lr}
;;;962    {
;;;963    
;;;964    	uint16_t i = 0;
000002  2400              MOVS     r4,#0
;;;965    	setLED_ResetPulse(WS_RES_POS_FRONT);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       setLED_ResetPulse
;;;966    	
;;;967    	for(i=0;i<(LED_NUM);i++)
;;;968    	{
;;;969    		WS2812C_Send_1Byte(DataBuffer[i*3]);
00000a  4e0a              LDR      r6,|L36.52|
                  |L36.12|
00000c  0060              LSLS     r0,r4,#1
00000e  1825              ADDS     r5,r4,r0
000010  5d70              LDRB     r0,[r6,r5]
000012  f7fffffe          BL       WS2812C_Send_1Byte
;;;970    		WS2812C_Send_1Byte(DataBuffer[i*3+1]);
000016  19ad              ADDS     r5,r5,r6
000018  7868              LDRB     r0,[r5,#1]
00001a  f7fffffe          BL       WS2812C_Send_1Byte
;;;971    		WS2812C_Send_1Byte(DataBuffer[i*3+2]);		
00001e  78a8              LDRB     r0,[r5,#2]
000020  f7fffffe          BL       WS2812C_Send_1Byte
000024  1c64              ADDS     r4,r4,#1
000026  b2a4              UXTH     r4,r4                 ;967
000028  2c12              CMP      r4,#0x12              ;967
00002a  d3ef              BCC      |L36.12|
;;;972    	}
;;;973    	
;;;974    	setLED_ResetPulse(WS_RES_POS_BACK);
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       setLED_ResetPulse
;;;975    	
;;;976    }
000032  bd70              POP      {r4-r6,pc}
;;;977    
                          ENDP

                  |L36.52|
                          DCD      ||.bss||

                          AREA ||i.setLED_ResetPulse||, CODE, READONLY, ALIGN=1

                  setLED_ResetPulse PROC
;;;946    
;;;947    void setLED_ResetPulse(uint8_t pos)	//target : 280us
000000  2800              CMP      r0,#0
;;;948    {
000002  d007              BEQ      |L37.20|
;;;949    	
;;;950    	if (pos == WS_RES_POS_FRONT)	//57 us
;;;951    	{
;;;952    		delay(400);
;;;953    	}
;;;954    	else
;;;955    	{
;;;956    		delay(MS_LED_LATCH);
000004  207d              MOVS     r0,#0x7d
000006  0100              LSLS     r0,r0,#4
                  |L37.8|
000008  4601              MOV      r1,r0
00000a  1e40              SUBS     r0,r0,#1
00000c  b280              UXTH     r0,r0
00000e  2900              CMP      r1,#0
000010  d1fa              BNE      |L37.8|
;;;957    	}
;;;958    
;;;959    }
000012  4770              BX       lr
                  |L37.20|
000014  20ff              MOVS     r0,#0xff              ;952
000016  3091              ADDS     r0,r0,#0x91           ;952
                  |L37.24|
000018  4601              MOV      r1,r0                 ;952
00001a  1e40              SUBS     r0,r0,#1              ;952
00001c  b280              UXTH     r0,r0                 ;952
00001e  2900              CMP      r1,#0                 ;952
000020  d1fa              BNE      |L37.24|
000022  4770              BX       lr
;;;960    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  DataBuffer
                          %        54

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  colorsFull
000000  ff0000fe          DCB      0xff,0x00,0x00,0xfe
000004  0100fd02          DCB      0x01,0x00,0xfd,0x02
000008  00fc0300          DCB      0x00,0xfc,0x03,0x00
00000c  fb0400fa          DCB      0xfb,0x04,0x00,0xfa
000010  0500f906          DCB      0x05,0x00,0xf9,0x06
000014  00f80700          DCB      0x00,0xf8,0x07,0x00
000018  f70800f6          DCB      0xf7,0x08,0x00,0xf6
00001c  0900f50a          DCB      0x09,0x00,0xf5,0x0a
000020  00f40b00          DCB      0x00,0xf4,0x0b,0x00
000024  f30c00f2          DCB      0xf3,0x0c,0x00,0xf2
000028  0d00f10e          DCB      0x0d,0x00,0xf1,0x0e
00002c  00f00f00          DCB      0x00,0xf0,0x0f,0x00
000030  ef1000ee          DCB      0xef,0x10,0x00,0xee
000034  1100ed12          DCB      0x11,0x00,0xed,0x12
000038  00ec1300          DCB      0x00,0xec,0x13,0x00
00003c  eb1400ea          DCB      0xeb,0x14,0x00,0xea
000040  1500e916          DCB      0x15,0x00,0xe9,0x16
000044  00e81700          DCB      0x00,0xe8,0x17,0x00
000048  e71800e6          DCB      0xe7,0x18,0x00,0xe6
00004c  1900e51a          DCB      0x19,0x00,0xe5,0x1a
000050  00e41b00          DCB      0x00,0xe4,0x1b,0x00
000054  e31c00e2          DCB      0xe3,0x1c,0x00,0xe2
000058  1d00e11e          DCB      0x1d,0x00,0xe1,0x1e
00005c  00e01f00          DCB      0x00,0xe0,0x1f,0x00
000060  df2000de          DCB      0xdf,0x20,0x00,0xde
000064  2100dd22          DCB      0x21,0x00,0xdd,0x22
000068  00dc2300          DCB      0x00,0xdc,0x23,0x00
00006c  db2400da          DCB      0xdb,0x24,0x00,0xda
000070  2500d926          DCB      0x25,0x00,0xd9,0x26
000074  00d82700          DCB      0x00,0xd8,0x27,0x00
000078  d72800d6          DCB      0xd7,0x28,0x00,0xd6
00007c  2900d52a          DCB      0x29,0x00,0xd5,0x2a
000080  00d42b00          DCB      0x00,0xd4,0x2b,0x00
000084  d32c00d2          DCB      0xd3,0x2c,0x00,0xd2
000088  2d00d12e          DCB      0x2d,0x00,0xd1,0x2e
00008c  00d02f00          DCB      0x00,0xd0,0x2f,0x00
000090  cf3000ce          DCB      0xcf,0x30,0x00,0xce
000094  3100cd32          DCB      0x31,0x00,0xcd,0x32
000098  00cc3300          DCB      0x00,0xcc,0x33,0x00
00009c  cb3400ca          DCB      0xcb,0x34,0x00,0xca
0000a0  3500c936          DCB      0x35,0x00,0xc9,0x36
0000a4  00c83700          DCB      0x00,0xc8,0x37,0x00
0000a8  c73800c6          DCB      0xc7,0x38,0x00,0xc6
0000ac  3900c53a          DCB      0x39,0x00,0xc5,0x3a
0000b0  00c43b00          DCB      0x00,0xc4,0x3b,0x00
0000b4  c33c00c2          DCB      0xc3,0x3c,0x00,0xc2
0000b8  3d00c13e          DCB      0x3d,0x00,0xc1,0x3e
0000bc  00c03f00          DCB      0x00,0xc0,0x3f,0x00
0000c0  bf4000be          DCB      0xbf,0x40,0x00,0xbe
0000c4  4100bd42          DCB      0x41,0x00,0xbd,0x42
0000c8  00bc4300          DCB      0x00,0xbc,0x43,0x00
0000cc  bb4400ba          DCB      0xbb,0x44,0x00,0xba
0000d0  4500b946          DCB      0x45,0x00,0xb9,0x46
0000d4  00b84700          DCB      0x00,0xb8,0x47,0x00
0000d8  b74800b6          DCB      0xb7,0x48,0x00,0xb6
0000dc  4900b54a          DCB      0x49,0x00,0xb5,0x4a
0000e0  00b44b00          DCB      0x00,0xb4,0x4b,0x00
0000e4  b34c00b2          DCB      0xb3,0x4c,0x00,0xb2
0000e8  4d00b14e          DCB      0x4d,0x00,0xb1,0x4e
0000ec  00b04f00          DCB      0x00,0xb0,0x4f,0x00
0000f0  af5000ae          DCB      0xaf,0x50,0x00,0xae
0000f4  5100ad52          DCB      0x51,0x00,0xad,0x52
0000f8  00ac5300          DCB      0x00,0xac,0x53,0x00
0000fc  ab5400aa          DCB      0xab,0x54,0x00,0xaa
000100  5500a956          DCB      0x55,0x00,0xa9,0x56
000104  00a85700          DCB      0x00,0xa8,0x57,0x00
000108  a75800a6          DCB      0xa7,0x58,0x00,0xa6
00010c  5900a55a          DCB      0x59,0x00,0xa5,0x5a
000110  00a45b00          DCB      0x00,0xa4,0x5b,0x00
000114  a35c00a2          DCB      0xa3,0x5c,0x00,0xa2
000118  5d00a15e          DCB      0x5d,0x00,0xa1,0x5e
00011c  00a05f00          DCB      0x00,0xa0,0x5f,0x00
000120  9f60009e          DCB      0x9f,0x60,0x00,0x9e
000124  61009d62          DCB      0x61,0x00,0x9d,0x62
000128  009c6300          DCB      0x00,0x9c,0x63,0x00
00012c  9b64009a          DCB      0x9b,0x64,0x00,0x9a
000130  65009966          DCB      0x65,0x00,0x99,0x66
000134  00986700          DCB      0x00,0x98,0x67,0x00
000138  97680096          DCB      0x97,0x68,0x00,0x96
00013c  6900956a          DCB      0x69,0x00,0x95,0x6a
000140  00946b00          DCB      0x00,0x94,0x6b,0x00
000144  936c0092          DCB      0x93,0x6c,0x00,0x92
000148  6d00916e          DCB      0x6d,0x00,0x91,0x6e
00014c  00906f00          DCB      0x00,0x90,0x6f,0x00
000150  8f70008e          DCB      0x8f,0x70,0x00,0x8e
000154  71008d72          DCB      0x71,0x00,0x8d,0x72
000158  008c7300          DCB      0x00,0x8c,0x73,0x00
00015c  8b74008a          DCB      0x8b,0x74,0x00,0x8a
000160  75008976          DCB      0x75,0x00,0x89,0x76
000164  00887700          DCB      0x00,0x88,0x77,0x00
000168  87780086          DCB      0x87,0x78,0x00,0x86
00016c  7900857a          DCB      0x79,0x00,0x85,0x7a
000170  00847b00          DCB      0x00,0x84,0x7b,0x00
000174  837c0082          DCB      0x83,0x7c,0x00,0x82
000178  7d00817e          DCB      0x7d,0x00,0x81,0x7e
00017c  00807f00          DCB      0x00,0x80,0x7f,0x00
000180  7f80007e          DCB      0x7f,0x80,0x00,0x7e
000184  81007d82          DCB      0x81,0x00,0x7d,0x82
000188  007c8300          DCB      0x00,0x7c,0x83,0x00
00018c  7b84007a          DCB      0x7b,0x84,0x00,0x7a
000190  85007986          DCB      0x85,0x00,0x79,0x86
000194  00788700          DCB      0x00,0x78,0x87,0x00
000198  77880076          DCB      0x77,0x88,0x00,0x76
00019c  8900758a          DCB      0x89,0x00,0x75,0x8a
0001a0  00748b00          DCB      0x00,0x74,0x8b,0x00
0001a4  738c0072          DCB      0x73,0x8c,0x00,0x72
0001a8  8d00718e          DCB      0x8d,0x00,0x71,0x8e
0001ac  00708f00          DCB      0x00,0x70,0x8f,0x00
0001b0  6f90006e          DCB      0x6f,0x90,0x00,0x6e
0001b4  91006d92          DCB      0x91,0x00,0x6d,0x92
0001b8  006c9300          DCB      0x00,0x6c,0x93,0x00
0001bc  6b94006a          DCB      0x6b,0x94,0x00,0x6a
0001c0  95006996          DCB      0x95,0x00,0x69,0x96
0001c4  00689700          DCB      0x00,0x68,0x97,0x00
0001c8  67980066          DCB      0x67,0x98,0x00,0x66
0001cc  9900659a          DCB      0x99,0x00,0x65,0x9a
0001d0  00649b00          DCB      0x00,0x64,0x9b,0x00
0001d4  639c0062          DCB      0x63,0x9c,0x00,0x62
0001d8  9d00619e          DCB      0x9d,0x00,0x61,0x9e
0001dc  00609f00          DCB      0x00,0x60,0x9f,0x00
0001e0  5fa0005e          DCB      0x5f,0xa0,0x00,0x5e
0001e4  a1005da2          DCB      0xa1,0x00,0x5d,0xa2
0001e8  005ca300          DCB      0x00,0x5c,0xa3,0x00
0001ec  5ba4005a          DCB      0x5b,0xa4,0x00,0x5a
0001f0  a50059a6          DCB      0xa5,0x00,0x59,0xa6
0001f4  0058a700          DCB      0x00,0x58,0xa7,0x00
0001f8  57a80056          DCB      0x57,0xa8,0x00,0x56
0001fc  a90055aa          DCB      0xa9,0x00,0x55,0xaa
000200  0054ab00          DCB      0x00,0x54,0xab,0x00
000204  53ac0052          DCB      0x53,0xac,0x00,0x52
000208  ad0051ae          DCB      0xad,0x00,0x51,0xae
00020c  0050af00          DCB      0x00,0x50,0xaf,0x00
000210  4fb0004e          DCB      0x4f,0xb0,0x00,0x4e
000214  b1004db2          DCB      0xb1,0x00,0x4d,0xb2
000218  004cb300          DCB      0x00,0x4c,0xb3,0x00
00021c  4bb4004a          DCB      0x4b,0xb4,0x00,0x4a
000220  b50049b6          DCB      0xb5,0x00,0x49,0xb6
000224  0048b700          DCB      0x00,0x48,0xb7,0x00
000228  47b80046          DCB      0x47,0xb8,0x00,0x46
00022c  b90045ba          DCB      0xb9,0x00,0x45,0xba
000230  0044bb00          DCB      0x00,0x44,0xbb,0x00
000234  43bc0042          DCB      0x43,0xbc,0x00,0x42
000238  bd0041be          DCB      0xbd,0x00,0x41,0xbe
00023c  0040bf00          DCB      0x00,0x40,0xbf,0x00
000240  3fc0003e          DCB      0x3f,0xc0,0x00,0x3e
000244  c1003dc2          DCB      0xc1,0x00,0x3d,0xc2
000248  003cc300          DCB      0x00,0x3c,0xc3,0x00
00024c  3bc4003a          DCB      0x3b,0xc4,0x00,0x3a
000250  c50039c6          DCB      0xc5,0x00,0x39,0xc6
000254  0038c700          DCB      0x00,0x38,0xc7,0x00
000258  37c80036          DCB      0x37,0xc8,0x00,0x36
00025c  c90035ca          DCB      0xc9,0x00,0x35,0xca
000260  0034cb00          DCB      0x00,0x34,0xcb,0x00
000264  33cc0032          DCB      0x33,0xcc,0x00,0x32
000268  cd0031ce          DCB      0xcd,0x00,0x31,0xce
00026c  0030cf00          DCB      0x00,0x30,0xcf,0x00
000270  2fd0002e          DCB      0x2f,0xd0,0x00,0x2e
000274  d1002dd2          DCB      0xd1,0x00,0x2d,0xd2
000278  002cd300          DCB      0x00,0x2c,0xd3,0x00
00027c  2bd4002a          DCB      0x2b,0xd4,0x00,0x2a
000280  d50029d6          DCB      0xd5,0x00,0x29,0xd6
000284  0028d700          DCB      0x00,0x28,0xd7,0x00
000288  27d80026          DCB      0x27,0xd8,0x00,0x26
00028c  d90025da          DCB      0xd9,0x00,0x25,0xda
000290  0024db00          DCB      0x00,0x24,0xdb,0x00
000294  23dc0022          DCB      0x23,0xdc,0x00,0x22
000298  dd0021de          DCB      0xdd,0x00,0x21,0xde
00029c  0020df00          DCB      0x00,0x20,0xdf,0x00
0002a0  1fe0001e          DCB      0x1f,0xe0,0x00,0x1e
0002a4  e1001de2          DCB      0xe1,0x00,0x1d,0xe2
0002a8  001ce300          DCB      0x00,0x1c,0xe3,0x00
0002ac  1be4001a          DCB      0x1b,0xe4,0x00,0x1a
0002b0  e50019e6          DCB      0xe5,0x00,0x19,0xe6
0002b4  0018e700          DCB      0x00,0x18,0xe7,0x00
0002b8  17e80016          DCB      0x17,0xe8,0x00,0x16
0002bc  e90015ea          DCB      0xe9,0x00,0x15,0xea
0002c0  0014eb00          DCB      0x00,0x14,0xeb,0x00
0002c4  13ec0012          DCB      0x13,0xec,0x00,0x12
0002c8  ed0011ee          DCB      0xed,0x00,0x11,0xee
0002cc  0010ef00          DCB      0x00,0x10,0xef,0x00
0002d0  0ff0000e          DCB      0x0f,0xf0,0x00,0x0e
0002d4  f1000df2          DCB      0xf1,0x00,0x0d,0xf2
0002d8  000cf300          DCB      0x00,0x0c,0xf3,0x00
0002dc  0bf4000a          DCB      0x0b,0xf4,0x00,0x0a
0002e0  f50009f6          DCB      0xf5,0x00,0x09,0xf6
0002e4  0008f700          DCB      0x00,0x08,0xf7,0x00
0002e8  07f80006          DCB      0x07,0xf8,0x00,0x06
0002ec  f90005fa          DCB      0xf9,0x00,0x05,0xfa
0002f0  0004fb00          DCB      0x00,0x04,0xfb,0x00
0002f4  03fc0002          DCB      0x03,0xfc,0x00,0x02
0002f8  fd0001fe          DCB      0xfd,0x00,0x01,0xfe
0002fc  0000ff00          DCB      0x00,0x00,0xff,0x00
000300  00fe0100          DCB      0x00,0xfe,0x01,0x00
000304  fd0200fc          DCB      0xfd,0x02,0x00,0xfc
000308  0300fb04          DCB      0x03,0x00,0xfb,0x04
00030c  00fa0500          DCB      0x00,0xfa,0x05,0x00
000310  f90600f8          DCB      0xf9,0x06,0x00,0xf8
000314  0700f708          DCB      0x07,0x00,0xf7,0x08
000318  00f60900          DCB      0x00,0xf6,0x09,0x00
00031c  f50a00f4          DCB      0xf5,0x0a,0x00,0xf4
000320  0b00f30c          DCB      0x0b,0x00,0xf3,0x0c
000324  00f20d00          DCB      0x00,0xf2,0x0d,0x00
000328  f10e00f0          DCB      0xf1,0x0e,0x00,0xf0
00032c  0f00ef10          DCB      0x0f,0x00,0xef,0x10
000330  00ee1100          DCB      0x00,0xee,0x11,0x00
000334  ed1200ec          DCB      0xed,0x12,0x00,0xec
000338  1300eb14          DCB      0x13,0x00,0xeb,0x14
00033c  00ea1500          DCB      0x00,0xea,0x15,0x00
000340  e91600e8          DCB      0xe9,0x16,0x00,0xe8
000344  1700e718          DCB      0x17,0x00,0xe7,0x18
000348  00e61900          DCB      0x00,0xe6,0x19,0x00
00034c  e51a00e4          DCB      0xe5,0x1a,0x00,0xe4
000350  1b00e31c          DCB      0x1b,0x00,0xe3,0x1c
000354  00e21d00          DCB      0x00,0xe2,0x1d,0x00
000358  e11e00e0          DCB      0xe1,0x1e,0x00,0xe0
00035c  1f00df20          DCB      0x1f,0x00,0xdf,0x20
000360  00de2100          DCB      0x00,0xde,0x21,0x00
000364  dd2200dc          DCB      0xdd,0x22,0x00,0xdc
000368  2300db24          DCB      0x23,0x00,0xdb,0x24
00036c  00da2500          DCB      0x00,0xda,0x25,0x00
000370  d92600d8          DCB      0xd9,0x26,0x00,0xd8
000374  2700d728          DCB      0x27,0x00,0xd7,0x28
000378  00d62900          DCB      0x00,0xd6,0x29,0x00
00037c  d52a00d4          DCB      0xd5,0x2a,0x00,0xd4
000380  2b00d32c          DCB      0x2b,0x00,0xd3,0x2c
000384  00d22d00          DCB      0x00,0xd2,0x2d,0x00
000388  d12e00d0          DCB      0xd1,0x2e,0x00,0xd0
00038c  2f00cf30          DCB      0x2f,0x00,0xcf,0x30
000390  00ce3100          DCB      0x00,0xce,0x31,0x00
000394  cd3200cc          DCB      0xcd,0x32,0x00,0xcc
000398  3300cb34          DCB      0x33,0x00,0xcb,0x34
00039c  00ca3500          DCB      0x00,0xca,0x35,0x00
0003a0  c93600c8          DCB      0xc9,0x36,0x00,0xc8
0003a4  3700c738          DCB      0x37,0x00,0xc7,0x38
0003a8  00c63900          DCB      0x00,0xc6,0x39,0x00
0003ac  c53a00c4          DCB      0xc5,0x3a,0x00,0xc4
0003b0  3b00c33c          DCB      0x3b,0x00,0xc3,0x3c
0003b4  00c23d00          DCB      0x00,0xc2,0x3d,0x00
0003b8  c13e00c0          DCB      0xc1,0x3e,0x00,0xc0
0003bc  3f00bf40          DCB      0x3f,0x00,0xbf,0x40
0003c0  00be4100          DCB      0x00,0xbe,0x41,0x00
0003c4  bd4200bc          DCB      0xbd,0x42,0x00,0xbc
0003c8  4300bb44          DCB      0x43,0x00,0xbb,0x44
0003cc  00ba4500          DCB      0x00,0xba,0x45,0x00
0003d0  b94600b8          DCB      0xb9,0x46,0x00,0xb8
0003d4  4700b748          DCB      0x47,0x00,0xb7,0x48
0003d8  00b64900          DCB      0x00,0xb6,0x49,0x00
0003dc  b54a00b4          DCB      0xb5,0x4a,0x00,0xb4
0003e0  4b00b34c          DCB      0x4b,0x00,0xb3,0x4c
0003e4  00b24d00          DCB      0x00,0xb2,0x4d,0x00
0003e8  b14e00b0          DCB      0xb1,0x4e,0x00,0xb0
0003ec  4f00af50          DCB      0x4f,0x00,0xaf,0x50
0003f0  00ae5100          DCB      0x00,0xae,0x51,0x00
0003f4  ad5200ac          DCB      0xad,0x52,0x00,0xac
0003f8  5300ab54          DCB      0x53,0x00,0xab,0x54
0003fc  00aa5500          DCB      0x00,0xaa,0x55,0x00
000400  a95600a8          DCB      0xa9,0x56,0x00,0xa8
000404  5700a758          DCB      0x57,0x00,0xa7,0x58
000408  00a65900          DCB      0x00,0xa6,0x59,0x00
00040c  a55a00a4          DCB      0xa5,0x5a,0x00,0xa4
000410  5b00a35c          DCB      0x5b,0x00,0xa3,0x5c
000414  00a25d00          DCB      0x00,0xa2,0x5d,0x00
000418  a15e00a0          DCB      0xa1,0x5e,0x00,0xa0
00041c  5f009f60          DCB      0x5f,0x00,0x9f,0x60
000420  009e6100          DCB      0x00,0x9e,0x61,0x00
000424  9d62009c          DCB      0x9d,0x62,0x00,0x9c
000428  63009b64          DCB      0x63,0x00,0x9b,0x64
00042c  009a6500          DCB      0x00,0x9a,0x65,0x00
000430  99660098          DCB      0x99,0x66,0x00,0x98
000434  67009768          DCB      0x67,0x00,0x97,0x68
000438  00966900          DCB      0x00,0x96,0x69,0x00
00043c  956a0094          DCB      0x95,0x6a,0x00,0x94
000440  6b00936c          DCB      0x6b,0x00,0x93,0x6c
000444  00926d00          DCB      0x00,0x92,0x6d,0x00
000448  916e0090          DCB      0x91,0x6e,0x00,0x90
00044c  6f008f70          DCB      0x6f,0x00,0x8f,0x70
000450  008e7100          DCB      0x00,0x8e,0x71,0x00
000454  8d72008c          DCB      0x8d,0x72,0x00,0x8c
000458  73008b74          DCB      0x73,0x00,0x8b,0x74
00045c  008a7500          DCB      0x00,0x8a,0x75,0x00
000460  89760088          DCB      0x89,0x76,0x00,0x88
000464  77008778          DCB      0x77,0x00,0x87,0x78
000468  00867900          DCB      0x00,0x86,0x79,0x00
00046c  857a0084          DCB      0x85,0x7a,0x00,0x84
000470  7b00837c          DCB      0x7b,0x00,0x83,0x7c
000474  00827d00          DCB      0x00,0x82,0x7d,0x00
000478  817e0080          DCB      0x81,0x7e,0x00,0x80
00047c  7f007f80          DCB      0x7f,0x00,0x7f,0x80
000480  007e8100          DCB      0x00,0x7e,0x81,0x00
000484  7d82007c          DCB      0x7d,0x82,0x00,0x7c
000488  83007b84          DCB      0x83,0x00,0x7b,0x84
00048c  007a8500          DCB      0x00,0x7a,0x85,0x00
000490  79860078          DCB      0x79,0x86,0x00,0x78
000494  87007788          DCB      0x87,0x00,0x77,0x88
000498  00768900          DCB      0x00,0x76,0x89,0x00
00049c  758a0074          DCB      0x75,0x8a,0x00,0x74
0004a0  8b00738c          DCB      0x8b,0x00,0x73,0x8c
0004a4  00728d00          DCB      0x00,0x72,0x8d,0x00
0004a8  718e0070          DCB      0x71,0x8e,0x00,0x70
0004ac  8f006f90          DCB      0x8f,0x00,0x6f,0x90
0004b0  006e9100          DCB      0x00,0x6e,0x91,0x00
0004b4  6d92006c          DCB      0x6d,0x92,0x00,0x6c
0004b8  93006b94          DCB      0x93,0x00,0x6b,0x94
0004bc  006a9500          DCB      0x00,0x6a,0x95,0x00
0004c0  69960068          DCB      0x69,0x96,0x00,0x68
0004c4  97006798          DCB      0x97,0x00,0x67,0x98
0004c8  00669900          DCB      0x00,0x66,0x99,0x00
0004cc  659a0064          DCB      0x65,0x9a,0x00,0x64
0004d0  9b00639c          DCB      0x9b,0x00,0x63,0x9c
0004d4  00629d00          DCB      0x00,0x62,0x9d,0x00
0004d8  619e0060          DCB      0x61,0x9e,0x00,0x60
0004dc  9f005fa0          DCB      0x9f,0x00,0x5f,0xa0
0004e0  005ea100          DCB      0x00,0x5e,0xa1,0x00
0004e4  5da2005c          DCB      0x5d,0xa2,0x00,0x5c
0004e8  a3005ba4          DCB      0xa3,0x00,0x5b,0xa4
0004ec  005aa500          DCB      0x00,0x5a,0xa5,0x00
0004f0  59a60058          DCB      0x59,0xa6,0x00,0x58
0004f4  a70057a8          DCB      0xa7,0x00,0x57,0xa8
0004f8  0056a900          DCB      0x00,0x56,0xa9,0x00
0004fc  55aa0054          DCB      0x55,0xaa,0x00,0x54
000500  ab0053ac          DCB      0xab,0x00,0x53,0xac
000504  0052ad00          DCB      0x00,0x52,0xad,0x00
000508  51ae0050          DCB      0x51,0xae,0x00,0x50
00050c  af004fb0          DCB      0xaf,0x00,0x4f,0xb0
000510  004eb100          DCB      0x00,0x4e,0xb1,0x00
000514  4db2004c          DCB      0x4d,0xb2,0x00,0x4c
000518  b3004bb4          DCB      0xb3,0x00,0x4b,0xb4
00051c  004ab500          DCB      0x00,0x4a,0xb5,0x00
000520  49b60048          DCB      0x49,0xb6,0x00,0x48
000524  b70047b8          DCB      0xb7,0x00,0x47,0xb8
000528  0046b900          DCB      0x00,0x46,0xb9,0x00
00052c  45ba0044          DCB      0x45,0xba,0x00,0x44
000530  bb0043bc          DCB      0xbb,0x00,0x43,0xbc
000534  0042bd00          DCB      0x00,0x42,0xbd,0x00
000538  41be0040          DCB      0x41,0xbe,0x00,0x40
00053c  bf003fc0          DCB      0xbf,0x00,0x3f,0xc0
000540  003ec100          DCB      0x00,0x3e,0xc1,0x00
000544  3dc2003c          DCB      0x3d,0xc2,0x00,0x3c
000548  c3003bc4          DCB      0xc3,0x00,0x3b,0xc4
00054c  003ac500          DCB      0x00,0x3a,0xc5,0x00
000550  39c60038          DCB      0x39,0xc6,0x00,0x38
000554  c70037c8          DCB      0xc7,0x00,0x37,0xc8
000558  0036c900          DCB      0x00,0x36,0xc9,0x00
00055c  35ca0034          DCB      0x35,0xca,0x00,0x34
000560  cb0033cc          DCB      0xcb,0x00,0x33,0xcc
000564  0032cd00          DCB      0x00,0x32,0xcd,0x00
000568  31ce0030          DCB      0x31,0xce,0x00,0x30
00056c  cf002fd0          DCB      0xcf,0x00,0x2f,0xd0
000570  002ed100          DCB      0x00,0x2e,0xd1,0x00
000574  2dd2002c          DCB      0x2d,0xd2,0x00,0x2c
000578  d3002bd4          DCB      0xd3,0x00,0x2b,0xd4
00057c  002ad500          DCB      0x00,0x2a,0xd5,0x00
000580  29d60028          DCB      0x29,0xd6,0x00,0x28
000584  d70027d8          DCB      0xd7,0x00,0x27,0xd8
000588  0026d900          DCB      0x00,0x26,0xd9,0x00
00058c  25da0024          DCB      0x25,0xda,0x00,0x24
000590  db0023dc          DCB      0xdb,0x00,0x23,0xdc
000594  0022dd00          DCB      0x00,0x22,0xdd,0x00
000598  21de0020          DCB      0x21,0xde,0x00,0x20
00059c  df001fe0          DCB      0xdf,0x00,0x1f,0xe0
0005a0  001ee100          DCB      0x00,0x1e,0xe1,0x00
0005a4  1de2001c          DCB      0x1d,0xe2,0x00,0x1c
0005a8  e3001be4          DCB      0xe3,0x00,0x1b,0xe4
0005ac  001ae500          DCB      0x00,0x1a,0xe5,0x00
0005b0  19e60018          DCB      0x19,0xe6,0x00,0x18
0005b4  e70017e8          DCB      0xe7,0x00,0x17,0xe8
0005b8  0016e900          DCB      0x00,0x16,0xe9,0x00
0005bc  15ea0014          DCB      0x15,0xea,0x00,0x14
0005c0  eb0013ec          DCB      0xeb,0x00,0x13,0xec
0005c4  0012ed00          DCB      0x00,0x12,0xed,0x00
0005c8  11ee0010          DCB      0x11,0xee,0x00,0x10
0005cc  ef000ff0          DCB      0xef,0x00,0x0f,0xf0
0005d0  000ef100          DCB      0x00,0x0e,0xf1,0x00
0005d4  0df2000c          DCB      0x0d,0xf2,0x00,0x0c
0005d8  f3000bf4          DCB      0xf3,0x00,0x0b,0xf4
0005dc  000af500          DCB      0x00,0x0a,0xf5,0x00
0005e0  09f60008          DCB      0x09,0xf6,0x00,0x08
0005e4  f70007f8          DCB      0xf7,0x00,0x07,0xf8
0005e8  0006f900          DCB      0x00,0x06,0xf9,0x00
0005ec  05fa0004          DCB      0x05,0xfa,0x00,0x04
0005f0  fb0003fc          DCB      0xfb,0x00,0x03,0xfc
0005f4  0002fd00          DCB      0x00,0x02,0xfd,0x00
0005f8  01fe0000          DCB      0x01,0xfe,0x00,0x00
0005fc  ff0100fe          DCB      0xff,0x01,0x00,0xfe
000600  0200fd03          DCB      0x02,0x00,0xfd,0x03
000604  00fc0400          DCB      0x00,0xfc,0x04,0x00
000608  fb0500fa          DCB      0xfb,0x05,0x00,0xfa
00060c  0600f907          DCB      0x06,0x00,0xf9,0x07
000610  00f80800          DCB      0x00,0xf8,0x08,0x00
000614  f70900f6          DCB      0xf7,0x09,0x00,0xf6
000618  0a00f50b          DCB      0x0a,0x00,0xf5,0x0b
00061c  00f40c00          DCB      0x00,0xf4,0x0c,0x00
000620  f30d00f2          DCB      0xf3,0x0d,0x00,0xf2
000624  0e00f10f          DCB      0x0e,0x00,0xf1,0x0f
000628  00f01000          DCB      0x00,0xf0,0x10,0x00
00062c  ef1100ee          DCB      0xef,0x11,0x00,0xee
000630  1200ed13          DCB      0x12,0x00,0xed,0x13
000634  00ec1400          DCB      0x00,0xec,0x14,0x00
000638  eb1500ea          DCB      0xeb,0x15,0x00,0xea
00063c  1600e917          DCB      0x16,0x00,0xe9,0x17
000640  00e81800          DCB      0x00,0xe8,0x18,0x00
000644  e71900e6          DCB      0xe7,0x19,0x00,0xe6
000648  1a00e51b          DCB      0x1a,0x00,0xe5,0x1b
00064c  00e41c00          DCB      0x00,0xe4,0x1c,0x00
000650  e31d00e2          DCB      0xe3,0x1d,0x00,0xe2
000654  1e00e11f          DCB      0x1e,0x00,0xe1,0x1f
000658  00e02000          DCB      0x00,0xe0,0x20,0x00
00065c  df2100de          DCB      0xdf,0x21,0x00,0xde
000660  2200dd23          DCB      0x22,0x00,0xdd,0x23
000664  00dc2400          DCB      0x00,0xdc,0x24,0x00
000668  db2500da          DCB      0xdb,0x25,0x00,0xda
00066c  2600d927          DCB      0x26,0x00,0xd9,0x27
000670  00d82800          DCB      0x00,0xd8,0x28,0x00
000674  d72900d6          DCB      0xd7,0x29,0x00,0xd6
000678  2a00d52b          DCB      0x2a,0x00,0xd5,0x2b
00067c  00d42c00          DCB      0x00,0xd4,0x2c,0x00
000680  d32d00d2          DCB      0xd3,0x2d,0x00,0xd2
000684  2e00d12f          DCB      0x2e,0x00,0xd1,0x2f
000688  00d03000          DCB      0x00,0xd0,0x30,0x00
00068c  cf3100ce          DCB      0xcf,0x31,0x00,0xce
000690  3200cd33          DCB      0x32,0x00,0xcd,0x33
000694  00cc3400          DCB      0x00,0xcc,0x34,0x00
000698  cb3500ca          DCB      0xcb,0x35,0x00,0xca
00069c  3600c937          DCB      0x36,0x00,0xc9,0x37
0006a0  00c83800          DCB      0x00,0xc8,0x38,0x00
0006a4  c73900c6          DCB      0xc7,0x39,0x00,0xc6
0006a8  3a00c53b          DCB      0x3a,0x00,0xc5,0x3b
0006ac  00c43c00          DCB      0x00,0xc4,0x3c,0x00
0006b0  c33d00c2          DCB      0xc3,0x3d,0x00,0xc2
0006b4  3e00c13f          DCB      0x3e,0x00,0xc1,0x3f
0006b8  00c04000          DCB      0x00,0xc0,0x40,0x00
0006bc  bf4100be          DCB      0xbf,0x41,0x00,0xbe
0006c0  4200bd43          DCB      0x42,0x00,0xbd,0x43
0006c4  00bc4400          DCB      0x00,0xbc,0x44,0x00
0006c8  bb4500ba          DCB      0xbb,0x45,0x00,0xba
0006cc  4600b947          DCB      0x46,0x00,0xb9,0x47
0006d0  00b84800          DCB      0x00,0xb8,0x48,0x00
0006d4  b74900b6          DCB      0xb7,0x49,0x00,0xb6
0006d8  4a00b54b          DCB      0x4a,0x00,0xb5,0x4b
0006dc  00b44c00          DCB      0x00,0xb4,0x4c,0x00
0006e0  b34d00b2          DCB      0xb3,0x4d,0x00,0xb2
0006e4  4e00b14f          DCB      0x4e,0x00,0xb1,0x4f
0006e8  00b05000          DCB      0x00,0xb0,0x50,0x00
0006ec  af5100ae          DCB      0xaf,0x51,0x00,0xae
0006f0  5200ad53          DCB      0x52,0x00,0xad,0x53
0006f4  00ac5400          DCB      0x00,0xac,0x54,0x00
0006f8  ab5500aa          DCB      0xab,0x55,0x00,0xaa
0006fc  5600a957          DCB      0x56,0x00,0xa9,0x57
000700  00a85800          DCB      0x00,0xa8,0x58,0x00
000704  a75900a6          DCB      0xa7,0x59,0x00,0xa6
000708  5a00a55b          DCB      0x5a,0x00,0xa5,0x5b
00070c  00a45c00          DCB      0x00,0xa4,0x5c,0x00
000710  a35d00a2          DCB      0xa3,0x5d,0x00,0xa2
000714  5e00a15f          DCB      0x5e,0x00,0xa1,0x5f
000718  00a06000          DCB      0x00,0xa0,0x60,0x00
00071c  9f61009e          DCB      0x9f,0x61,0x00,0x9e
000720  62009d63          DCB      0x62,0x00,0x9d,0x63
000724  009c6400          DCB      0x00,0x9c,0x64,0x00
000728  9b65009a          DCB      0x9b,0x65,0x00,0x9a
00072c  66009967          DCB      0x66,0x00,0x99,0x67
000730  00986800          DCB      0x00,0x98,0x68,0x00
000734  97690096          DCB      0x97,0x69,0x00,0x96
000738  6a00956b          DCB      0x6a,0x00,0x95,0x6b
00073c  00946c00          DCB      0x00,0x94,0x6c,0x00
000740  936d0092          DCB      0x93,0x6d,0x00,0x92
000744  6e00916f          DCB      0x6e,0x00,0x91,0x6f
000748  00907000          DCB      0x00,0x90,0x70,0x00
00074c  8f71008e          DCB      0x8f,0x71,0x00,0x8e
000750  72008d73          DCB      0x72,0x00,0x8d,0x73
000754  008c7400          DCB      0x00,0x8c,0x74,0x00
000758  8b75008a          DCB      0x8b,0x75,0x00,0x8a
00075c  76008977          DCB      0x76,0x00,0x89,0x77
000760  00887800          DCB      0x00,0x88,0x78,0x00
000764  87790086          DCB      0x87,0x79,0x00,0x86
000768  7a00857b          DCB      0x7a,0x00,0x85,0x7b
00076c  00847c00          DCB      0x00,0x84,0x7c,0x00
000770  837d0082          DCB      0x83,0x7d,0x00,0x82
000774  7e00817f          DCB      0x7e,0x00,0x81,0x7f
000778  00808000          DCB      0x00,0x80,0x80,0x00
00077c  7f81007e          DCB      0x7f,0x81,0x00,0x7e
000780  82007d83          DCB      0x82,0x00,0x7d,0x83
000784  007c8400          DCB      0x00,0x7c,0x84,0x00
000788  7b85007a          DCB      0x7b,0x85,0x00,0x7a
00078c  86007987          DCB      0x86,0x00,0x79,0x87
000790  00788800          DCB      0x00,0x78,0x88,0x00
000794  77890076          DCB      0x77,0x89,0x00,0x76
000798  8a00758b          DCB      0x8a,0x00,0x75,0x8b
00079c  00748c00          DCB      0x00,0x74,0x8c,0x00
0007a0  738d0072          DCB      0x73,0x8d,0x00,0x72
0007a4  8e00718f          DCB      0x8e,0x00,0x71,0x8f
0007a8  00709000          DCB      0x00,0x70,0x90,0x00
0007ac  6f91006e          DCB      0x6f,0x91,0x00,0x6e
0007b0  92006d93          DCB      0x92,0x00,0x6d,0x93
0007b4  006c9400          DCB      0x00,0x6c,0x94,0x00
0007b8  6b95006a          DCB      0x6b,0x95,0x00,0x6a
0007bc  96006997          DCB      0x96,0x00,0x69,0x97
0007c0  00689800          DCB      0x00,0x68,0x98,0x00
0007c4  67990066          DCB      0x67,0x99,0x00,0x66
0007c8  9a00659b          DCB      0x9a,0x00,0x65,0x9b
0007cc  00649c00          DCB      0x00,0x64,0x9c,0x00
0007d0  639d0062          DCB      0x63,0x9d,0x00,0x62
0007d4  9e00619f          DCB      0x9e,0x00,0x61,0x9f
0007d8  0060a000          DCB      0x00,0x60,0xa0,0x00
0007dc  5fa1005e          DCB      0x5f,0xa1,0x00,0x5e
0007e0  a2005da3          DCB      0xa2,0x00,0x5d,0xa3
0007e4  005ca400          DCB      0x00,0x5c,0xa4,0x00
0007e8  5ba5005a          DCB      0x5b,0xa5,0x00,0x5a
0007ec  a60059a7          DCB      0xa6,0x00,0x59,0xa7
0007f0  0058a800          DCB      0x00,0x58,0xa8,0x00
0007f4  57a90056          DCB      0x57,0xa9,0x00,0x56
0007f8  aa0055ab          DCB      0xaa,0x00,0x55,0xab
0007fc  0054ac00          DCB      0x00,0x54,0xac,0x00
000800  53ad0052          DCB      0x53,0xad,0x00,0x52
000804  ae0051af          DCB      0xae,0x00,0x51,0xaf
000808  0050b000          DCB      0x00,0x50,0xb0,0x00
00080c  4fb1004e          DCB      0x4f,0xb1,0x00,0x4e
000810  b2004db3          DCB      0xb2,0x00,0x4d,0xb3
000814  004cb400          DCB      0x00,0x4c,0xb4,0x00
000818  4bb5004a          DCB      0x4b,0xb5,0x00,0x4a
00081c  b60049b7          DCB      0xb6,0x00,0x49,0xb7
000820  0048b800          DCB      0x00,0x48,0xb8,0x00
000824  47b90046          DCB      0x47,0xb9,0x00,0x46
000828  ba0045bb          DCB      0xba,0x00,0x45,0xbb
00082c  0044bc00          DCB      0x00,0x44,0xbc,0x00
000830  43bd0042          DCB      0x43,0xbd,0x00,0x42
000834  be0041bf          DCB      0xbe,0x00,0x41,0xbf
000838  0040c000          DCB      0x00,0x40,0xc0,0x00
00083c  3fc1003e          DCB      0x3f,0xc1,0x00,0x3e
000840  c2003dc3          DCB      0xc2,0x00,0x3d,0xc3
000844  003cc400          DCB      0x00,0x3c,0xc4,0x00
000848  3bc5003a          DCB      0x3b,0xc5,0x00,0x3a
00084c  c60039c7          DCB      0xc6,0x00,0x39,0xc7
000850  0038c800          DCB      0x00,0x38,0xc8,0x00
000854  37c90036          DCB      0x37,0xc9,0x00,0x36
000858  ca0035cb          DCB      0xca,0x00,0x35,0xcb
00085c  0034cc00          DCB      0x00,0x34,0xcc,0x00
000860  33cd0032          DCB      0x33,0xcd,0x00,0x32
000864  ce0031cf          DCB      0xce,0x00,0x31,0xcf
000868  0030d000          DCB      0x00,0x30,0xd0,0x00
00086c  2fd1002e          DCB      0x2f,0xd1,0x00,0x2e
000870  d2002dd3          DCB      0xd2,0x00,0x2d,0xd3
000874  002cd400          DCB      0x00,0x2c,0xd4,0x00
000878  2bd5002a          DCB      0x2b,0xd5,0x00,0x2a
00087c  d60029d7          DCB      0xd6,0x00,0x29,0xd7
000880  0028d800          DCB      0x00,0x28,0xd8,0x00
000884  27d90026          DCB      0x27,0xd9,0x00,0x26
000888  da0025db          DCB      0xda,0x00,0x25,0xdb
00088c  0024dc00          DCB      0x00,0x24,0xdc,0x00
000890  23dd0022          DCB      0x23,0xdd,0x00,0x22
000894  de0021df          DCB      0xde,0x00,0x21,0xdf
000898  0020e000          DCB      0x00,0x20,0xe0,0x00
00089c  1fe1001e          DCB      0x1f,0xe1,0x00,0x1e
0008a0  e2001de3          DCB      0xe2,0x00,0x1d,0xe3
0008a4  001ce400          DCB      0x00,0x1c,0xe4,0x00
0008a8  1be5001a          DCB      0x1b,0xe5,0x00,0x1a
0008ac  e60019e7          DCB      0xe6,0x00,0x19,0xe7
0008b0  0018e800          DCB      0x00,0x18,0xe8,0x00
0008b4  17e90016          DCB      0x17,0xe9,0x00,0x16
0008b8  ea0015eb          DCB      0xea,0x00,0x15,0xeb
0008bc  0014ec00          DCB      0x00,0x14,0xec,0x00
0008c0  13ed0012          DCB      0x13,0xed,0x00,0x12
0008c4  ee0011ef          DCB      0xee,0x00,0x11,0xef
0008c8  0010f000          DCB      0x00,0x10,0xf0,0x00
0008cc  0ff1000e          DCB      0x0f,0xf1,0x00,0x0e
0008d0  f2000df3          DCB      0xf2,0x00,0x0d,0xf3
0008d4  000cf400          DCB      0x00,0x0c,0xf4,0x00
0008d8  0bf5000a          DCB      0x0b,0xf5,0x00,0x0a
0008dc  f60009f7          DCB      0xf6,0x00,0x09,0xf7
0008e0  0008f800          DCB      0x00,0x08,0xf8,0x00
0008e4  07f90006          DCB      0x07,0xf9,0x00,0x06
0008e8  fa0005fb          DCB      0xfa,0x00,0x05,0xfb
0008ec  0004fc00          DCB      0x00,0x04,0xfc,0x00
0008f0  03fd0002          DCB      0x03,0xfd,0x00,0x02
0008f4  fe0001ff          DCB      0xfe,0x00,0x01,0xff
0008f8  0000              DCB      0x00,0x00

                          AREA ||.data||, DATA, ALIGN=1

                  DemoState
000000  31                DCB      0x31
                  flag
000001  01                DCB      0x01
                  ||Red||
000002  ff                DCB      0xff
                  Green
000003  00                DCB      0x00
                  Blue
000004  00                DCB      0x00
                  State
000005  00                DCB      0x00
                  intensity
000006  00                DCB      0x00
                  sign
000007  00                DCB      0x00
                  |symbol_number.114|
000008  0100              DCB      0x01,0x00
                  Coloridx
00000a  0000              DCW      0x0000
                  ||CNT||
00000c  0000              DCW      0x0000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L225.16|
00000e  461d              MOV      r5,r3
                  |L225.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_bd2cd617____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_bd2cd617____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_bd2cd617____REVSH|
#line 402
|__asm___6_main_c_bd2cd617____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
